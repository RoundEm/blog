{"version":3,"file":"static/webpack/static/development/pages/posts/[slug].js.928e9c981bcc8cebb079.hot-update.js","sources":["webpack:///./pages/posts/[slug].js"],"sourcesContent":["import client from '../../client'\nimport HeaderLayout from '../../components/HeaderLayout'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport Prism from 'prismjs/components/prism-core'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport themes from '../../colorsAndThemes'\n\nconst MainContent = styled.div`\n    margin-top: 1.5em;\n    font-size: 1.15em;\n    line-height: 1.75em;\n`\nconst PDesc = styled.p`\n    font-size: 1.1em;\n    color: ${({ theme }) => theme.primaryColor};\n    margin: 3px 0 0;\n`\nconst PDate = styled(PDesc)`\n    font-size: 1em;\n    color: ${({ theme }) => theme.text};\n`\nconst PBlock = styled.p`\n    margin-bottom: 1em;\n`\nconst AsideBlock = styled.div`\n    margin-bottom: 1em;\n`\n// TODO: fix overflow and add horizontal scroll\nconst Pre = styled.pre`\n    /* font-family: 'Courier Prime', monospace;\n    font-family: 'Cutive Mono', monospace; */\n    font-family: 'Nanum Gothic Coding', monospace;\n    font-size: .9em;\n    overflow: auto;\n    text-align: left;\n    margin: 1em 0;\n    padding: 0.5em;\n    & .token-line {\n        line-height: 1.3em;\n        height: 1.3em;\n    }\n    /* box-shadow: 0px 6px 7px -4px; */\n`\nconst LineNo = styled.span`\n    display: inline-block;\n    width: 2em;\n    user-select: none;\n    opacity: 0.3;\n`\n// TODO: add block type for blockquote-like content\n\nfunction Post(props) {\n    console.log('propsPost: ', props)\n    const postContent = []\n\n    function paragraphBlock(content, key) {\n        return <PBlock key={key}>{content}</PBlock>\n    }\n\n    function asideStringNewlines(content, key) {\n        const contentArray = content.split('\\n')\n        console.log('contentArray: ', contentArray)\n        const renderedLines = []\n        for (const line of contentArray) {\n            renderedLines.push(<div>{line}</div>)\n        }\n        return AsideBlockrenderedLines\n        // return <AsideBlock key={key}>{content}</AsideBlock>\n    }\n    \n    function prismafyCodeBlock(content, _key) {\n        return (\n            <Highlight \n                {...defaultProps} \n                theme={\n                    props.themeString === 'light'\n                        ? themes.light.syntax\n                        : themes.dark.syntax\n                } \n                code={content} \n                language=\"jsx\"\n                key={_key}\n            >\n                {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                    <Pre className={className} style={style}>\n                        {tokens.map((line, i) => (\n                            <div {...getLineProps({ line, key: i })}>\n                                <LineNo>{i + 1}</LineNo>\n                                {line.map((token, key) => {\n                                    return (\n                                        <span {...getTokenProps({ token, key })} />\n                                    )\n                                })}\n                            </div>\n                        ))}\n                    </Pre>\n                )}\n            </Highlight>\n        )\n    }\n\n    props.body && props.body.forEach(section => {\n        // TODO: change to switch:\n        if (section._type === 'block') {\n            postContent.push(\n                paragraphBlock(\n                    section.children[0].text, section._key\n                )\n            )\n        } else if (section._type === 'code') {\n            postContent.push(\n                prismafyCodeBlock(section.code, section._key)\n            )\n        } else if (section._type === 'post_aside') {\n            postContent.push(\n                asideStringNewlines(\n                    section.string_content, section._key\n                )\n            )\n        }\n    })\n\n    return (\n        <HeaderLayout \n            onToggleThemeClick={props.onToggleThemeClick}\n            themeString={props.themeString}\n        >\n            <article>\n                <h2>{props.title}</h2>\n                <PDesc>{props.description}</PDesc>\n                {/* // TODO: Add _updatedAt field? */}\n                <PDate>{moment.utc(props._createdAt).format(\"LL\")}</PDate>\n                <MainContent>\n                    {postContent.map(content => content)}\n                </MainContent>\n            </article>\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticPaths() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n    // Get the paths we want to pre-render based on posts\n    const paths = posts.map(post => ({\n        params: { slug: post.slug.current },\n    }))\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n  \nexport async function getStaticProps(context) {\n    const { slug } = context.params\n    const post = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, { slug } )\n    return { props: post }\n}\n  \n// Post.getInitialProps = async function(context) {\n//     // default the slug so that it doesn't return \"undefined\"\n//     // console.log('context: ', context)\n//     const { slug = \"\" } = context.query\n//     const data = await client.fetch(`\n//         *[_type == \"post\" && slug.current == $slug][0]\n//     `, { slug })\n//     return data\n// }\n\nexport default Post"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAegBA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAGA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;A","sourceRoot":""}