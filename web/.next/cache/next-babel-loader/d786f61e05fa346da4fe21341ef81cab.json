{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(250,223,147);\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.75em;\"]);\n\nfunction Index(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts;\n  console.log('posts: ', posts);\n\n  var _useState = useState([]),\n      filteredKeywords = _useState[0],\n      setFilteredKeywords = _useState[1];\n\n  var _useState2 = useState([]),\n      filteredPosts = _useState2[0],\n      setFilteredPosts = _useState2[1];\n\n  function getFilteredPosts() {\n    var posts;\n    return _regeneratorRuntime.async(function getFilteredPosts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(client.fetch(\"\\n            *[ _type == \\\"post\\\" && tag.name in $filteredKeywords]{\\n                ..., \\n                tags[]->{_id, name}\\n            }\\n        \", {\n              filteredKeywords: filteredKeywords\n            }));\n\n          case 2:\n            posts = _context.sent;\n            console.log('posts: ', posts);\n            setFilteredPosts(posts);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handleTagFilter(e) {\n    var selectedKeyword = e.target.firstChild.data; // console.log('selectedKeyword: ', selectedKeyword)\n\n    if (!filteredKeywords.includes(selectedKeyword)) {\n      setFilteredKeywords([].concat(_toConsumableArray(filteredKeywords), [selectedKeyword]));\n    } else {\n      setFilteredKeywords(filteredKeywords.filter(function (keyword) {\n        return keyword !== selectedKeyword;\n      }));\n    }\n\n    console.log('filteredKeywords: ', filteredKeywords);\n    getFilteredPosts();\n  } // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n\n\n  var tags = posts.reduce(function (tagCount, post) {\n    // TODO: is this check necessary or will there always be tags even when empty array?\n    post.tags && post.tags.forEach(function (tag) {\n      if (!tagCount[tag.name]) {\n        tagCount[tag.name].count = 1;\n        tagCount[tag.name]._id = tag._id;\n      } else {\n        tagCount[tag.name] = tagCount[tag.name].count + 1;\n      }\n    });\n    return tagCount;\n  }, {});\n  console.log('tags: ', tags); // const tagCountsArray = []\n  // for (const [ tag, count ] of Object.entries(tags)) {\n  //     tagCountsArray.push({\n  //         'name': tag,\n  //         count,\n  //         _id\n  //     })\n  // }\n\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags // tags={tagCountsArray}\n  , {\n    handleTagFilter: handleTagFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), posts.map(function (_ref2) {\n    var _id = _ref2._id,\n        _createdAt = _ref2._createdAt,\n        description = _ref2.description,\n        slug = _ref2.slug,\n        title = _ref2.title;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }, title)), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")));\n  }));\n}\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","styled","moment","HeaderLayout","KeywordTags","ListItem","li","DateP","p","Index","posts","console","log","filteredKeywords","setFilteredKeywords","filteredPosts","setFilteredPosts","getFilteredPosts","fetch","handleTagFilter","e","selectedKeyword","target","firstChild","data","includes","filter","keyword","tags","reduce","tagCount","post","forEach","tag","name","count","_id","map","_createdAt","description","slug","title","current","utc","format"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts }) {\n    console.log('posts: ', posts)\n    const [ filteredKeywords, setFilteredKeywords ] = useState([])\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n\n    async function getFilteredPosts() {\n        const posts = await client.fetch(`\n            *[ _type == \"post\" && tag.name in $filteredKeywords]{\n                ..., \n                tags[]->{_id, name}\n            }\n        `, { filteredKeywords })\n        console.log('posts: ', posts)\n        setFilteredPosts(posts)\n    }\n\n    function handleTagFilter(e) {\n        const selectedKeyword = e.target.firstChild.data\n        // console.log('selectedKeyword: ', selectedKeyword)\n        if (!filteredKeywords.includes(selectedKeyword)) {\n            setFilteredKeywords([...filteredKeywords, selectedKeyword])\n        } else {\n            setFilteredKeywords(filteredKeywords.filter(keyword => keyword !== selectedKeyword))\n        }\n        console.log('filteredKeywords: ', filteredKeywords)\n        getFilteredPosts()\n    }\n\n    // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n    const tags = posts.reduce((tagCount, post) => {\n        // TODO: is this check necessary or will there always be tags even when empty array?\n        post.tags && post.tags.forEach(tag => {\n            if (!tagCount[tag.name]) {\n                tagCount[tag.name].count = 1\n                tagCount[tag.name]._id = tag._id\n            } else {\n                tagCount[tag.name] = tagCount[tag.name].count + 1\n            }\n        })\n        return tagCount\n    }, {})\n    console.log('tags: ', tags)\n    // const tagCountsArray = []\n    // for (const [ tag, count ] of Object.entries(tags)) {\n    //     tagCountsArray.push({\n    //         'name': tag,\n    //         count,\n    //         _id\n    //     })\n    // }\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                // tags={tagCountsArray}\n                handleTagFilter={handleTagFilter}\n            />\n\n            <h2>Posts:</h2>\n            {posts.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    return { props: { posts } }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}