{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/post/[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport client from '../../client';\nimport HeaderLayout from '../../components/HeaderLayout';\nimport styled from 'styled-components';\nimport moment from 'moment'; // import Prism from 'prismjs/components/prism-core'\n\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport prismTheme from 'prism-react-renderer/themes/dracula';\nconst Article = styled.article.withConfig({\n  displayName: \"slug__Article\",\n  componentId: \"sc-1e354jq-0\"\n})([\"margin-top:1.5em;font-size:1.15em;line-height:1.75em;\"]);\nconst PDesc = styled.p.withConfig({\n  displayName: \"slug__PDesc\",\n  componentId: \"sc-1e354jq-1\"\n})([\"font-size:1.1em;color:\", \";margin:3px 0 0;\"], ({\n  theme\n}) => theme.primaryColor);\nconst PDate = styled(PDesc).withConfig({\n  displayName: \"slug__PDate\",\n  componentId: \"sc-1e354jq-2\"\n})([\"font-size:1em;color:\", \";\"], ({\n  theme\n}) => theme.text);\nconst PBlock = styled.p.withConfig({\n  displayName: \"slug__PBlock\",\n  componentId: \"sc-1e354jq-3\"\n})([\"margin-bottom:1em;\"]); // TODO: fix overflow and add horizontal scroll\n\nconst Pre = styled.pre.withConfig({\n  displayName: \"slug__Pre\",\n  componentId: \"sc-1e354jq-4\"\n})([\"font-family:'Nanum Gothic Coding',monospace;font-size:.9em;overflow:auto;text-align:left;margin:1em 0;padding:0.5em;& .token-line{line-height:1.3em;height:1.3em;}\"]);\nconst LineNo = styled.span.withConfig({\n  displayName: \"slug__LineNo\",\n  componentId: \"sc-1e354jq-5\"\n})([\"display:inline-block;width:2em;user-select:none;opacity:0.3;\"]); // TODO: add block type for blockquote-like content\n\nfunction formatParagraphBlock(content, key) {\n  return __jsx(PBlock, {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }\n  }, content);\n}\n\nfunction prismafyCodeBlock(content, _key) {\n  return __jsx(Highlight, _extends({}, defaultProps, {\n    theme: prismTheme,\n    code: content,\n    language: \"jsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), ({\n    className,\n    style,\n    tokens,\n    getLineProps,\n    getTokenProps\n  }) => __jsx(Pre, {\n    className: className,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, tokens.map((line, i) => __jsx(\"div\", _extends({}, getLineProps({\n    line,\n    key: i\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }), __jsx(LineNo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }, i + 1), line.map((token, key) => {\n    return __jsx(\"span\", _extends({}, getTokenProps({\n      token,\n      key\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 37\n      }\n    }));\n  })))));\n}\n\nfunction Post(props) {\n  console.log('propsPost: ', props.body);\n  const postContent = [];\n  props.body && props.body.forEach(section => {\n    if (section._type === 'block') {\n      postContent.push(formatParagraphBlock(section.children[0].text, section._key));\n    } else if (section._type === 'code') {\n      postContent.push(prismafyCodeBlock(section.code));\n    }\n  }); // console.log('postContent: ', postContent)\n\n  return __jsx(HeaderLayout, {\n    onToggleThemeClick: props.onToggleThemeClick,\n    themeString: props.themeString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, props.title), __jsx(PDesc, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, props.description), __jsx(PDate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, moment.utc(props._createdAt).format(\"LL\")), __jsx(Article, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, postContent.map(content => content))));\n}\n\nPost.getInitialProps = async function (context) {\n  // default the slug so that it doesn't return \"undefined\"\n  // console.log('context: ', context)\n  const {\n    slug = \"\"\n  } = context.query;\n  const data = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, {\n    slug\n  });\n  return data;\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/post/[slug].js"],"names":["client","HeaderLayout","styled","moment","Highlight","defaultProps","prismTheme","Article","article","PDesc","p","theme","primaryColor","PDate","text","PBlock","Pre","pre","LineNo","span","formatParagraphBlock","content","key","prismafyCodeBlock","_key","className","style","tokens","getLineProps","getTokenProps","map","line","i","token","Post","props","console","log","body","postContent","forEach","section","_type","push","children","code","onToggleThemeClick","themeString","title","description","utc","_createdAt","format","getInitialProps","context","slug","query","data","fetch"],"mappings":"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","sourcesContent":["import client from '../../client'\nimport HeaderLayout from '../../components/HeaderLayout'\nimport styled from 'styled-components'\nimport moment from 'moment'\n// import Prism from 'prismjs/components/prism-core'\nimport Highlight, { defaultProps } from \"prism-react-renderer\"\nimport prismTheme from 'prism-react-renderer/themes/dracula'\n\nconst Article = styled.article`\n    margin-top: 1.5em;\n    font-size: 1.15em;\n    line-height: 1.75em;\n`\nconst PDesc = styled.p`\n    font-size: 1.1em;\n    color: ${({ theme }) => theme.primaryColor};\n    margin: 3px 0 0;\n`\nconst PDate = styled(PDesc)`\n    font-size: 1em;\n    color: ${({ theme }) => theme.text};\n`\nconst PBlock = styled.p`\n    margin-bottom: 1em;\n`\n// TODO: fix overflow and add horizontal scroll\nconst Pre = styled.pre`\n    /* font-family: 'Courier Prime', monospace;\n    font-family: 'Cutive Mono', monospace; */\n    font-family: 'Nanum Gothic Coding', monospace;\n    font-size: .9em;\n    overflow: auto;\n    text-align: left;\n    margin: 1em 0;\n    padding: 0.5em;\n    & .token-line {\n        line-height: 1.3em;\n        height: 1.3em;\n    }\n    /* box-shadow: 0px 6px 7px -4px; */\n`\nconst LineNo = styled.span`\n    display: inline-block;\n    width: 2em;\n    user-select: none;\n    opacity: 0.3;\n`\n// TODO: add block type for blockquote-like content\n\nfunction formatParagraphBlock(content, key) {\n    return <PBlock key={key}>{content}</PBlock>\n}\n\nfunction prismafyCodeBlock(content, _key) {\n    return (\n        <Highlight \n            {...defaultProps} \n            theme={prismTheme} \n            code={content} \n            language=\"jsx\"\n        >\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <Pre className={className} style={style}>\n                    {tokens.map((line, i) => (\n                        <div {...getLineProps({ line, key: i })}>\n                            <LineNo>{i + 1}</LineNo>\n                            {line.map((token, key) => {\n                                return (\n                                    <span {...getTokenProps({ token, key })} />\n                                )\n                            })}\n                        </div>\n                    ))}\n                </Pre>\n            )}\n        </Highlight>\n    )\n}\n\nfunction Post(props) {\n    console.log('propsPost: ', props.body)\n    const postContent = []\n    props.body && props.body.forEach(section => {\n        if (section._type === 'block') {\n            postContent.push(\n                formatParagraphBlock(section.children[0].text, section._key)\n            )\n        } else if (section._type === 'code') {\n            postContent.push(\n                prismafyCodeBlock(section.code)\n            )\n        }\n    })\n\n    // console.log('postContent: ', postContent)\n    return (\n        <HeaderLayout \n            onToggleThemeClick={props.onToggleThemeClick}\n            themeString={props.themeString}\n        >\n            <article>\n                <h2>{props.title}</h2>\n                <PDesc>{props.description}</PDesc>\n                {/* // TODO: Add _updatedAt field? */}\n                <PDate>{moment.utc(props._createdAt).format(\"LL\")}</PDate>\n                <Article>\n                    {postContent.map(content => content)}\n                </Article>\n            \n            </article>\n        </HeaderLayout>\n    )\n}\n\nPost.getInitialProps = async function(context) {\n    // default the slug so that it doesn't return \"undefined\"\n    // console.log('context: ', context)\n    const { slug = \"\" } = context.query\n    const data = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, { slug })\n    return data\n}\n\nexport default Post"]},"metadata":{},"sourceType":"module"}