{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport '../globalStyles.css';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;;font-size:1.75em;\"]);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.85em;\"]);\n\nconst Index = props => {\n  console.log('props: ', props); // const propsArray = Object.values(props)\n  // last item in props is next.js url metadata\n\n  const posts = propsArray.slice(0, propsArray.length - 1); // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n\n  const tags = posts.reduce((tagCount, post) => {\n    // TODO: is this check necessary or will there always be tags even when empty array?\n    const postTags = post.tags && post.tags; // console.log('postTags: ', postTags)\n\n    postTags.forEach(tag => {\n      if (!tagCount[tag.name]) {\n        tagCount[tag.name] = 1;\n      } else {\n        tagCount[tag.name] = tagCount[tag.name] + 1;\n      }\n    });\n    return tagCount;\n  }, {});\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), posts.map(({\n    _id,\n    _createdAt,\n    slug,\n    title,\n    description\n  }) => __jsx(ListItem, {\n    key: _id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: \"/post/[slug]\",\n    as: `/post/${slug.current}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }, title)), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, description), __jsx(DateP, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, moment.utc(_createdAt).format(\"LL\")))));\n};\n\nexport async function getStaticProps() {\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  return {\n    props: {\n      posts\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","HeaderLayout","KeywordTags","styled","moment","ListItem","li","DateP","p","Index","props","console","log","posts","propsArray","slice","length","tags","reduce","tagCount","post","postTags","forEach","tag","name","map","_id","_createdAt","slug","title","description","current","utc","format","getStaticProps","fetch"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,qBAAP;AAEA,MAAMC,QAAQ,GAAGF,MAAM,CAACG,EAAV;AAAA;AAAA;AAAA,+CAAd;AAIA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,CAAV;AAAA;AAAA;AAAA,wBAAX;;AAIA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB,EADqB,CAErB;AACA;;AACA,QAAMG,KAAK,GAAGC,UAAU,CAACC,KAAX,CACV,CADU,EACPD,UAAU,CAACE,MAAX,GAAoB,CADb,CAAd,CAJqB,CAOrB;;AACA,QAAMC,IAAI,GAAGJ,KAAK,CAACK,MAAN,CAAa,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC1C;AACD,UAAMC,QAAQ,GAAGD,IAAI,CAACH,IAAL,IAAaG,IAAI,CAACH,IAAnC,CAF2C,CAG1C;;AACAI,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,GAAG,IAAI;AACpB,UAAI,CAACJ,QAAQ,CAACI,GAAG,CAACC,IAAL,CAAb,EAAyB;AACrBL,QAAAA,QAAQ,CAACI,GAAG,CAACC,IAAL,CAAR,GAAqB,CAArB;AACH,OAFD,MAEO;AACHL,QAAAA,QAAQ,CAACI,GAAG,CAACC,IAAL,CAAR,GAAqBL,QAAQ,CAACI,GAAG,CAACC,IAAL,CAAR,GAAqB,CAA1C;AACH;AACJ,KAND;AAOA,WAAOL,QAAP;AACH,GAZY,EAYV,EAZU,CAAb;AAcA,SACI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI,MAAC,WAAD;AACI,IAAA,IAAI,EAAEF,IADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,EAOKJ,KAAK,CAACY,GAAN,CACG,CAAC;AACGC,IAAAA,GADH;AAEGC,IAAAA,UAFH;AAGGC,IAAAA,IAHH;AAIGC,IAAAA,KAJH;AAKGC,IAAAA;AALH,GAAD,KAOI,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEJ,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AACI,IAAA,IAAI,EAAC,cADT;AAEI,IAAA,EAAE,EAAG,SAAQE,IAAI,CAACG,OAAQ,EAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,KAAJ,CAJJ,CADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,WAAJ,CAPJ,EAQI,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK1B,MAAM,CAAC4B,GAAP,CAAWL,UAAX,EAAuBM,MAAvB,CAA8B,IAA9B,CADL,CARJ,CARP,CAPL,CADJ;AAgCH,CAtDD;;AAwDA,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMrB,KAAK,GAAG,MAAMd,MAAM,CAACoC,KAAP,CAAc;;;;;KAAd,CAApB;AAOA,SAAO;AACHzB,IAAAA,KAAK,EAAE;AAAEG,MAAAA;AAAF;AADJ,GAAP;AAGH;AAED,eAAeJ,KAAf","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;;\n    font-size: 1.75em;\n`\nconst DateP = styled.p`\n    font-size: .85em;\n`\n\nconst Index = (props) => {\n    console.log('props: ', props)\n    // const propsArray = Object.values(props)\n    // last item in props is next.js url metadata\n    const posts = propsArray.slice(\n        0, propsArray.length - 1\n    )\n    // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n    const tags = posts.reduce((tagCount, post) => {\n        // TODO: is this check necessary or will there always be tags even when empty array?\n       const postTags = post.tags && post.tags\n        // console.log('postTags: ', postTags)\n        postTags.forEach(tag => {\n            if (!tagCount[tag.name]) {\n                tagCount[tag.name] = 1\n            } else {\n                tagCount[tag.name] = tagCount[tag.name] + 1\n            }\n        })\n        return tagCount\n    }, {})\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tags}\n            />\n\n            <h2>Posts:</h2>\n            {posts.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    slug, \n                    title, \n                    description, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    return {\n        props: { posts }\n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}