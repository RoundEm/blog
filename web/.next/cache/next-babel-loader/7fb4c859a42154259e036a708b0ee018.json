{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid var(--primary-darker);\"]);\nvar TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-1\"\n})([\"display:inline-block;margin-right:5px;padding:3px 5px;font-size:.5em;background-color:var(--secondary-color);\"]);\nvar DescP = styled.p.withConfig({\n  displayName: \"pages__DescP\",\n  componentId: \"nuslkc-2\"\n})([\"font-size:.85em;\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-3\"\n})([\"font-size:.7em;\"]); // removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using Set, then parsing the final unique array of posts back to a normal array of objects\n\nfunction uniquePostsArray(posts) {\n  return _toConsumableArray(new Set(posts.map(function (postObj) {\n    return JSON.stringify(postObj);\n  }))).map(function (postStr) {\n    return JSON.parse(postStr);\n  });\n}\n\nfunction Index(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts,\n      tags = _ref.tags,\n      tagCountss = _ref.tagCountss;\n  console.log('tagCountss: ', tagCountss);\n  console.log('posts: ', posts);\n  console.log('tags: ', tags);\n\n  var _useState = useState(posts),\n      allPosts = _useState[0],\n      setAllPosts = _useState[1];\n\n  var _useState2 = useState([]),\n      filteredPosts = _useState2[0],\n      setFilteredPosts = _useState2[1];\n\n  var _useState3 = useState(tagCountss),\n      tagCounts = _useState3[0],\n      setTagCounts = _useState3[1];\n\n  var _useState4 = useState([]),\n      filteredTags = _useState4[0],\n      setFilteredTags = _useState4[1];\n\n  console.log('filteredTags global: ', filteredTags);\n  console.log('filteredPosts global: ', filteredPosts);\n  console.log('tagCounts global: ', tagCounts); // function getTagCountsData() {\n  //     return Promise.all(\n  //         tags.map(async tag => {\n  //             return await client.fetch(`\n  //                 *[ _id == $tagID ]{\n  //                     name,\n  //                     _id,\n  //                     \"tagCount\": count(\n  //                         *[ _type == \"post\" && $tagID in tags[]._ref ]\n  //                     )\n  //                 }[0]\n  //             `, { tagID: tag._id })\n  //         })\n  //     )\n  // }\n  // useEffect(() => {\n  //     getTagCountsData()\n  //         .then(tagCounts => {\n  //             setTagCounts(tagCounts)\n  //         })\n  //         .catch(err => console.log('error getting tag counts: ', err))\n  //     // tags.forEach(async tag => {\n  //     //     const count = await client.fetch(`\n  //     //         count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n  //     //     `, { tagID: tag._id })\n  //     //     // this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n  //     //     if (count > 0) {\n  //     //         const tagCount = {\n  //     //             _id: tag._id,\n  //     //             name: tag.name,\n  //     //             count\n  //     //         }\n  //     //         // TODO: what's a good way to set these all these at once??\n  //     //         setTagCounts(state => [...state, tagCount])\n  //     //     }\n  //     // })\n  // }, [])\n\n  useEffect(function () {\n    if (filteredTags.length > 0) {\n      var _filteredPosts = [];\n      allPosts.forEach(function (post) {\n        post.tags.forEach(function (tag) {\n          if (filteredTags.includes(tag._id)) {\n            _filteredPosts.push(post);\n          }\n        });\n      }); // console.log('_filteredPosts: ', _filteredPosts)\n\n      setFilteredPosts(uniquePostsArray(_filteredPosts));\n    } else {\n      setFilteredPosts([]);\n    }\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    var selectedTagID = e.target.id;\n\n    if (selectedTagID === 'clearFilter') {\n      setFilteredTags([]);\n    } else if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(function (state) {\n        return [].concat(_toConsumableArray(state), [selectedTagID]);\n      });\n    } else {\n      setFilteredTags(filteredTags.filter(function (tag) {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  var postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    filteredTags: filteredTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), postsToRender.map(function (_ref2) {\n    var _id = _ref2._id,\n        _createdAt = _ref2._createdAt,\n        description = _ref2.description,\n        slug = _ref2.slug,\n        title = _ref2.title,\n        tags = _ref2.tags;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }, title)), __jsx(DescP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")), __jsx(\"ul\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, tags.map(function (tag) {\n      return __jsx(TagListItem, {\n        key: tag._id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 37\n        }\n      }, tag.name);\n    })));\n  }));\n}\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","TagListItem","DescP","p","DateP","uniquePostsArray","posts","Set","map","postObj","JSON","stringify","postStr","parse","Index","tags","tagCountss","console","log","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","length","_filteredPosts","forEach","post","tag","includes","_id","push","handleTagFilter","e","selectedTagID","target","id","state","filter","postsToRender","_createdAt","description","slug","title","current","utc","format","name"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid var(--primary-darker);\n`\nconst TagListItem = styled.li`\n    display: inline-block;\n    margin-right: 5px;\n    padding: 3px 5px;\n    font-size: .5em;\n    background-color: var(--secondary-color);\n`\nconst DescP = styled.p`\n    font-size: .85em;\n`\nconst DateP = styled.p`\n    font-size: .7em;\n`\n\n// removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using Set, then parsing the final unique array of posts back to a normal array of objects\nfunction uniquePostsArray(posts) {\n    return [\n        ...new Set(posts.map(postObj => {\n            return JSON.stringify(postObj)\n        }))\n    ].map(postStr => {\n       return JSON.parse(postStr)\n    })\n}\n\nfunction Index({ posts, tags, tagCountss }) {\n    console.log('tagCountss: ', tagCountss)\n    console.log('posts: ', posts)\n    console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState(tagCountss)\n    const [ filteredTags, setFilteredTags ] = useState([])\n    console.log('filteredTags global: ', filteredTags)\n    console.log('filteredPosts global: ', filteredPosts)\n    console.log('tagCounts global: ', tagCounts)\n    \n    // function getTagCountsData() {\n    //     return Promise.all(\n    //         tags.map(async tag => {\n    //             return await client.fetch(`\n    //                 *[ _id == $tagID ]{\n    //                     name,\n    //                     _id,\n    //                     \"tagCount\": count(\n    //                         *[ _type == \"post\" && $tagID in tags[]._ref ]\n    //                     )\n    //                 }[0]\n    //             `, { tagID: tag._id })\n    //         })\n    //     )\n    // }\n\n    // useEffect(() => {\n    //     getTagCountsData()\n    //         .then(tagCounts => {\n    //             setTagCounts(tagCounts)\n    //         })\n    //         .catch(err => console.log('error getting tag counts: ', err))\n    //     // tags.forEach(async tag => {\n    //     //     const count = await client.fetch(`\n    //     //         count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n    //     //     `, { tagID: tag._id })\n    //     //     // this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n    //     //     if (count > 0) {\n    //     //         const tagCount = {\n    //     //             _id: tag._id,\n    //     //             name: tag.name,\n    //     //             count\n    //     //         }\n    //     //         // TODO: what's a good way to set these all these at once??\n    //     //         setTagCounts(state => [...state, tagCount])\n    //     //     }\n    //     // })\n    // }, [])\n\n    useEffect(() => {\n        if (filteredTags.length > 0) {\n            const _filteredPosts = []\n            allPosts.forEach(post => {\n                post.tags.forEach(tag => {\n                    if (filteredTags.includes(tag._id)) {\n                        _filteredPosts.push(post)\n                    }\n                })\n            })\n            // console.log('_filteredPosts: ', _filteredPosts)\n            setFilteredPosts(\n                uniquePostsArray(_filteredPosts)\n            )\n\n        } else {\n            setFilteredPosts([])\n        }\n    }, [filteredTags])\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (selectedTagID === 'clearFilter') {\n            setFilteredTags([])\n        } else if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n                filteredTags={filteredTags}\n            />\n\n            <h2>Posts:</h2>\n            {postsToRender.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                    tags\n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <DescP>{description}</DescP>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                        <ul>\n                            {tags.map(tag => {\n                                return (\n                                    <TagListItem key={tag._id}>\n                                        {tag.name}\n                                    </TagListItem>\n                                )\n                                \n                            })}\n                        </ul>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    const ç = Promise.all(\n        tags.map(async tag => {\n            return await client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"tagCount\": count(\n                        *[ _type == \"post\" && $tagID in tags[]._ref ]\n                    )\n                }[0]\n            `, { tagID: tag._id })\n        })\n    ).then(res => res)\n\n    console.log('tagCountss: ', tagCountss)\n    return { \n        props: { \n            posts,\n            tags,\n            tagCountss\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}