{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:1em 0 0 .5em;font-size:1.75em;\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.85em;\"]);\n\nvar Index = function Index(props) {\n  // console.log('props: ', props)\n  var propsArray = Object.values(props); // last item in props is next.js url metadata\n\n  var posts = propsArray.slice(0, propsArray.length - 1); // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n\n  var tags = posts.reduce(function (tagCount, post) {\n    // TODO: is this check necessary or will there always be tags even when empty array?\n    var postTags = post.tags && post.tags; // console.log('postTags: ', postTags)\n\n    postTags.forEach(function (tag) {\n      if (!tagCount[tag.name]) {\n        tagCount[tag.name] = 1;\n      } else {\n        tagCount[tag.name] = tagCount[tag.name] + 1;\n      }\n    });\n    return tagCount;\n  }, {});\n  return __jsx(HeaderLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tags,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), posts.map(function (_ref) {\n    var _id = _ref._id,\n        _createdAt = _ref._createdAt,\n        slug = _ref.slug,\n        title = _ref.title,\n        description = _ref.description;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }\n    }, title)), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")));\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(client.fetch(\"\\n        *[ _type == \\\"post\\\" ]{\\n            ..., \\n            tags[]->{_id, name}\\n        }\\n    \"));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","HeaderLayout","KeywordTags","styled","moment","ListItem","li","DateP","p","Index","props","propsArray","Object","values","posts","slice","length","tags","reduce","tagCount","post","postTags","forEach","tag","name","map","_id","_createdAt","slug","title","description","current","utc","format","getInitialProps","fetch"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 1em 0 0 .5em;\n    font-size: 1.75em;\n`\nconst DateP = styled.p`\n    font-size: .85em;\n`\n\nconst Index = (props) => {\n    // console.log('props: ', props)\n    const propsArray = Object.values(props)\n    // last item in props is next.js url metadata\n    const posts = propsArray.slice(\n        0, propsArray.length - 1\n    )\n    // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n    const tags = posts.reduce((tagCount, post) => {\n        // TODO: is this check necessary or will there always be tags even when empty array?\n       const postTags = post.tags && post.tags\n        // console.log('postTags: ', postTags)\n        postTags.forEach(tag => {\n            if (!tagCount[tag.name]) {\n                tagCount[tag.name] = 1\n            } else {\n                tagCount[tag.name] = tagCount[tag.name] + 1\n            }\n        })\n        return tagCount\n    }, {})\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tags}\n            />\n\n            <h2>Posts:</h2>\n            {posts.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    slug, \n                    title, \n                    description, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nIndex.getInitialProps = async function() {\n    return await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}