{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(0,85,143);\"]);\nvar TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-1\"\n})([\"display:inline-block;margin-right:5px;padding:3px 5px;font-size:.5em;background-color:rgb(250,223,147);\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-2\"\n})([\"font-size:.75em;\"]);\n\nfunction Index(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts,\n      tags = _ref.tags;\n  console.log('posts: ', posts); // console.log('tags: ', tags)\n\n  var _useState = useState(posts),\n      allPosts = _useState[0],\n      setAllPosts = _useState[1];\n\n  var _useState2 = useState([]),\n      filteredPosts = _useState2[0],\n      setFilteredPosts = _useState2[1];\n\n  var _useState3 = useState([]),\n      tagCounts = _useState3[0],\n      setTagCounts = _useState3[1];\n\n  var _useState4 = useState([]),\n      filteredTags = _useState4[0],\n      setFilteredTags = _useState4[1]; // console.log('tagCounts: ', tagCounts)\n\n\n  console.log('filteredTags global: ', filteredTags);\n  console.log('filteredPosts global: ', filteredPosts);\n  useEffect(function () {\n    tags.forEach(function _callee(tag) {\n      var count, tagCount;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(client.fetch(\"\\n                count(*[ _type == \\\"post\\\" && $tagID in tags[]._ref ])\\n            \", {\n                tagID: tag._id\n              }));\n\n            case 2:\n              count = _context.sent;\n\n              // TODO: this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n              if (count > 0) {\n                tagCount = {\n                  _id: tag._id,\n                  name: tag.name,\n                  count: count\n                }; // TODO: Should i call all these at once??\n\n                setTagCounts(function (state) {\n                  return [].concat(_toConsumableArray(state), [tagCount]);\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  }, []);\n  useEffect(function () {\n    console.log('getFilteredPosts');\n    console.log('filteredTags useEffect: ', filteredTags); // TODO: not totally sure how this mounted variable \n    // and the cleanup function at the end are working\n    // to prevent react's memory leak warning:\n    // https://www.debuggr.io/react-update-unmounted-component/\n    // let mounted = true\n    // if (filteredTags.length > 0 && mounted) {\n\n    if (filteredTags.length > 0) {\n      var allMatchedPosts = filteredTags.map(function (tag) {\n        return client.fetch(\"\\n                    *[ _type == \\\"post\\\" && $tagID in tags[]._ref ]{\\n                        ..., \\n                        tags[]->{_id, name}\\n                    }\\n                \", {\n          tagID: tag\n        });\n      });\n      Promise.all(allMatchedPosts).then(function (data) {\n        // console.log('then', data)\n        var flattenedPosts = data.flat();\n\n        var uniqueArray = function uniqueArray(posts) {\n          return _toConsumableArray(new Set(posts.map(function (obj) {\n            return JSON.stringify(obj);\n          }))).map(function (s) {\n            return JSON.parse(s);\n          });\n        };\n\n        var uniquePosts = uniqueArray(flattenedPosts);\n        console.log('uniquePosts: ', uniquePosts);\n        setFilteredPosts(uniquePosts);\n      });\n      console.log('sadsadszddsa');\n    } else {\n      setFilteredPosts([]);\n    } // return () => mounted = false\n\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    var selectedTagID = e.target.id;\n\n    if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(function (state) {\n        return [].concat(_toConsumableArray(state), [selectedTagID]);\n      });\n    } else {\n      setFilteredTags(filteredTags.filter(function (tag) {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  var postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    filteredTags: filteredTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), postsToRender.map(function (_ref2) {\n    var _id = _ref2._id,\n        _createdAt = _ref2._createdAt,\n        description = _ref2.description,\n        slug = _ref2.slug,\n        title = _ref2.title,\n        tags = _ref2.tags;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 29\n      }\n    }, title)), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")), __jsx(\"ul\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, tags.map(function (tag) {\n      return __jsx(TagListItem, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 40\n        }\n      }, tag.name);\n    })));\n  }));\n}\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","TagListItem","DateP","p","Index","posts","tags","console","log","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","forEach","tag","fetch","tagID","_id","count","tagCount","name","state","length","allMatchedPosts","map","Promise","all","then","data","flattenedPosts","flat","uniqueArray","Set","obj","JSON","stringify","s","parse","uniquePosts","handleTagFilter","e","selectedTagID","target","id","includes","filter","postsToRender","_createdAt","description","slug","title","current","utc","format"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(0, 85, 143);\n`\nconst TagListItem = styled.li`\n    display: inline-block;\n    margin-right: 5px;\n    padding: 3px 5px;\n    font-size: .5em;\n    background-color: rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts, tags }) {\n    console.log('posts: ', posts)\n    // console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    // console.log('tagCounts: ', tagCounts)\n    console.log('filteredTags global: ', filteredTags)\n    console.log('filteredPosts global: ', filteredPosts)\n    \n    useEffect(() => {\n        tags.forEach(async tag => {\n            const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, { tagID: tag._id })\n            // TODO: this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n            if (count > 0) {\n                const tagCount = {\n                    _id: tag._id,\n                    name: tag.name,\n                    count\n                }\n                // TODO: Should i call all these at once??\n                setTagCounts(state => [...state, tagCount])\n            }\n        })\n    }, [])\n\n    \n    useEffect(() => {\n        console.log('getFilteredPosts')\n        console.log('filteredTags useEffect: ', filteredTags)\n\n        // TODO: not totally sure how this mounted variable \n        // and the cleanup function at the end are working\n        // to prevent react's memory leak warning:\n        // https://www.debuggr.io/react-update-unmounted-component/\n        // let mounted = true\n        // if (filteredTags.length > 0 && mounted) {\n        if (filteredTags.length > 0) {\n            const allMatchedPosts = filteredTags.map(tag => {\n                return client.fetch(`\n                    *[ _type == \"post\" && $tagID in tags[]._ref ]{\n                        ..., \n                        tags[]->{_id, name}\n                    }\n                `, { tagID: tag })\n            })\n            Promise.all(allMatchedPosts).then(data => {\n                // console.log('then', data)\n                const flattenedPosts = data.flat()\n                const uniqueArray = (posts) => [\n                    ...new Set(posts.map(obj => JSON.stringify(obj)))\n                ].map(s => JSON.parse(s));\n                const uniquePosts = uniqueArray(flattenedPosts)\n                console.log('uniquePosts: ', uniquePosts)\n                setFilteredPosts(uniquePosts)\n            })\n            console.log('sadsadszddsa')\n        } else {\n            setFilteredPosts([])\n        }\n        // return () => mounted = false\n    }, [filteredTags])\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n                filteredTags={filteredTags}\n            />\n\n            <h2>Posts:</h2>\n\n            {postsToRender.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                    tags\n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                        <ul>\n                            {tags.map(tag => {\n                                return <TagListItem>{tag.name}</TagListItem>\n                            })}\n                        </ul>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}