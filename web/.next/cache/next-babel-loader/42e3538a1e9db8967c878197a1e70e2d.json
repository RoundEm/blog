{"ast":null,"code":"import Link from 'next/link';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;;font-size:1.75em;\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.85em;\"]);\n\nvar Index = function Index(props) {\n  console.log('props: ', props); // const propsArray = Object.values(props)\n\n  var posts = props.posts; // console.log('posts: ', posts)\n  // return null\n  // last item in props is next.js url metadata\n  // const posts = propsArray.slice(\n  //     0, propsArray.length - 1\n  // )\n  // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n  // const tags = posts.reduce((tagCount, post) => {\n  //     // TODO: is this check necessary or will there always be tags even when empty array?\n  //    const postTags = post.tags && post.tags\n  //     // console.log('postTags: ', postTags)\n  //     postTags.forEach(tag => {\n  //         if (!tagCount[tag.name]) {\n  //             tagCount[tag.name] = 1\n  //         } else {\n  //             tagCount[tag.name] = tagCount[tag.name] + 1\n  //         }\n  //     })\n  //     return tagCount\n  // }, {})\n  // return (\n  //     <HeaderLayout>\n  //         <h2>Tags:</h2>\n  //         <KeywordTags \n  //             tags={tags}\n  //         />\n  //         <h2>Posts:</h2>\n  //         {posts.map(\n  //             ({ \n  //                 _id, \n  //                 _createdAt,\n  //                 slug, \n  //                 title, \n  //                 description, \n  //             }) => (\n  //                 <ListItem key={_id}>\n  //                     <Link\n  //                         href='/post/[slug]'\n  //                         as={`/post/${slug.current}`}\n  //                     >\n  //                         <a>{title}</a>\n  //                     </Link>\n  //                     <p>{description}</p>\n  //                     <DateP>\n  //                         {moment.utc(_createdAt).format(\"LL\")}\n  //                     </DateP>\n  //                 </ListItem>\n  //             )\n  //         )}\n  //     </HeaderLayout>\n  // )\n};\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["Link","HeaderLayout","KeywordTags","styled","moment","ListItem","li","DateP","p","Index","props","console","log","posts"],"mappings":"AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,qBAAP;AAEA,IAAMC,QAAQ,GAAGF,MAAM,CAACG,EAAV;AAAA;AAAA;AAAA,+CAAd;AAIA,IAAMC,KAAK,GAAGJ,MAAM,CAACK,CAAV;AAAA;AAAA;AAAA,wBAAX;;AAIA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB,EADqB,CAErB;;AAFqB,MAGbG,KAHa,GAGHH,KAHG,CAGbG,KAHa,EAIrB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA1DD;;;AAyEA,eAAeJ,KAAf","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;;\n    font-size: 1.75em;\n`\nconst DateP = styled.p`\n    font-size: .85em;\n`\n\nconst Index = (props) => {\n    console.log('props: ', props)\n    // const propsArray = Object.values(props)\n    const { posts } = props\n    // console.log('posts: ', posts)\n    // return null\n    \n    // last item in props is next.js url metadata\n    // const posts = propsArray.slice(\n    //     0, propsArray.length - 1\n    // )\n    // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n    // const tags = posts.reduce((tagCount, post) => {\n    //     // TODO: is this check necessary or will there always be tags even when empty array?\n    //    const postTags = post.tags && post.tags\n    //     // console.log('postTags: ', postTags)\n    //     postTags.forEach(tag => {\n    //         if (!tagCount[tag.name]) {\n    //             tagCount[tag.name] = 1\n    //         } else {\n    //             tagCount[tag.name] = tagCount[tag.name] + 1\n    //         }\n    //     })\n    //     return tagCount\n    // }, {})\n\n    // return (\n    //     <HeaderLayout>\n    //         <h2>Tags:</h2>\n    //         <KeywordTags \n    //             tags={tags}\n    //         />\n\n    //         <h2>Posts:</h2>\n    //         {posts.map(\n    //             ({ \n    //                 _id, \n    //                 _createdAt,\n    //                 slug, \n    //                 title, \n    //                 description, \n    //             }) => (\n    //                 <ListItem key={_id}>\n    //                     <Link\n    //                         href='/post/[slug]'\n    //                         as={`/post/${slug.current}`}\n    //                     >\n    //                         <a>{title}</a>\n    //                     </Link>\n    //                     <p>{description}</p>\n    //                     <DateP>\n    //                         {moment.utc(_createdAt).format(\"LL\")}\n    //                     </DateP>\n    //                 </ListItem>\n    //             )\n    //         )}\n    //     </HeaderLayout>\n    // )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    return {\n        props: { posts }\n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}