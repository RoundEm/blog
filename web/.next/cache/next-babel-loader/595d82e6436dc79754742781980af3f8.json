{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled, { ThemeProvider } from 'styled-components';\nimport { GlobalStyles } from '../components/GlobalStyles';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid var(--primary-darker);\"]);\nconst TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-1\"\n})([\"display:inline-block;margin-right:5px;padding:3px 5px;font-size:.5em;background-color:var(--secondary-color);\"]);\nconst DescP = styled.p.withConfig({\n  displayName: \"pages__DescP\",\n  componentId: \"nuslkc-2\"\n})([\"font-size:.85em;\"]);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-3\"\n})([\"font-size:.7em;\"]); // (due to objects being by ref) removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using `new Set`, then parsing the final unique array of posts back to a normal array of objects\n\nfunction uniquePostsArray(posts) {\n  return [...new Set(posts.map(postObj => {\n    return JSON.stringify(postObj);\n  }))].map(postStr => {\n    return JSON.parse(postStr);\n  });\n}\n\nfunction getTagCountsData(tags) {\n  return Promise.all(tags.map(async tag => {\n    return await client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"count\": count(\n                        *[ \n                            _type == \"post\" && \n                            $tagID in tags[]._ref \n                        ]\n                    )\n                }[0]\n            `, {\n      tagID: tag._id\n    });\n  }));\n}\n\nfunction Index({\n  posts,\n  tags\n}) {\n  // console.log('posts: ', posts)\n  // console.log('tags: ', tags)\n  const {\n    0: allPosts,\n    1: setAllPosts\n  } = useState(posts);\n  const {\n    0: filteredPosts,\n    1: setFilteredPosts\n  } = useState([]);\n  const {\n    0: tagCounts,\n    1: setTagCounts\n  } = useState([]);\n  const {\n    0: filteredTags,\n    1: setFilteredTags\n  } = useState([]);\n  useEffect(() => {\n    getTagCountsData(tags).then(tagCounts => {\n      setTagCounts(tagCounts);\n    }).catch(err => console.log('error getting tag counts: ', err));\n  }, []);\n  useEffect(() => {\n    if (filteredTags.length > 0) {\n      const _filteredPosts = [];\n      allPosts.forEach(post => {\n        post.tags.forEach(tag => {\n          if (filteredTags.includes(tag._id)) {\n            _filteredPosts.push(post);\n          }\n        });\n      });\n      setFilteredPosts(uniquePostsArray(_filteredPosts));\n    } else {\n      setFilteredPosts([]);\n    }\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    const selectedTagID = e.target.id;\n\n    if (selectedTagID === 'clearFilter') {\n      setFilteredTags([]);\n    } else if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(state => [...state, selectedTagID]);\n    } else {\n      setFilteredTags(filteredTags.filter(tag => {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  const postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(React.Fragment, null, __jsx(GlobalStyles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport async function getStaticProps() {\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `);\n  return {\n    props: {\n      posts,\n      tags\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","ThemeProvider","GlobalStyles","moment","HeaderLayout","KeywordTags","ListItem","li","TagListItem","DescP","p","DateP","uniquePostsArray","posts","Set","map","postObj","JSON","stringify","postStr","parse","getTagCountsData","tags","Promise","all","tag","fetch","tagID","_id","Index","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","then","catch","err","console","log","length","_filteredPosts","forEach","post","includes","push","handleTagFilter","e","selectedTagID","target","id","state","filter","postsToRender","getStaticProps","props"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { GlobalStyles } from '../components/GlobalStyles'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid var(--primary-darker);\n`\nconst TagListItem = styled.li`\n    display: inline-block;\n    margin-right: 5px;\n    padding: 3px 5px;\n    font-size: .5em;\n    background-color: var(--secondary-color);\n`\nconst DescP = styled.p`\n    font-size: .85em;\n`\nconst DateP = styled.p`\n    font-size: .7em;\n`\n\n// (due to objects being by ref) removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using `new Set`, then parsing the final unique array of posts back to a normal array of objects\nfunction uniquePostsArray(posts) {\n    return [\n        ...new Set(posts.map(postObj => {\n            return JSON.stringify(postObj)\n        }))\n    ].map(postStr => {\n       return JSON.parse(postStr)\n    })\n}\n\nfunction getTagCountsData(tags) {\n    return Promise.all(\n        tags.map(async tag => {\n            return await client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"count\": count(\n                        *[ \n                            _type == \"post\" && \n                            $tagID in tags[]._ref \n                        ]\n                    )\n                }[0]\n            `, { tagID: tag._id })\n        })\n    )\n}\n\nfunction Index({ posts, tags }) {\n    // console.log('posts: ', posts)\n    // console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    \n    useEffect(() => {\n        getTagCountsData(tags)\n            .then(tagCounts => {\n                setTagCounts(tagCounts)\n            })\n            .catch(err => console.log('error getting tag counts: ', err))\n    }, [])\n\n    useEffect(() => {\n        if (filteredTags.length > 0) {\n            const _filteredPosts = []\n            allPosts.forEach(post => {\n                post.tags.forEach(tag => {\n                    if (filteredTags.includes(tag._id)) {\n                        _filteredPosts.push(post)\n                    }\n                })\n            })  \n            setFilteredPosts(\n                uniquePostsArray(_filteredPosts)\n            )\n\n        } else {\n            setFilteredPosts([])\n        }\n    }, [filteredTags])\n\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (selectedTagID === 'clearFilter') {\n            setFilteredTags([])\n        } else if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        <>\n            <GlobalStyles />\n        </>\n        \n    )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}