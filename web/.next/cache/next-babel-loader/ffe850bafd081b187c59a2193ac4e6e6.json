{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(250,223,147);\"]);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.75em;\"]);\n\nfunction Index({\n  posts,\n  tags\n}) {\n  console.log('posts: ', posts);\n  console.log('tags: ', tags);\n  const {\n    0: allPosts,\n    1: setAllPosts\n  } = useState(posts);\n  const {\n    0: filteredPosts,\n    1: setFilteredPosts\n  } = useState([]);\n  const {\n    0: tagCounts,\n    1: setTagCounts\n  } = useState([]);\n  const {\n    0: filteredTags,\n    1: setFilteredTags\n  } = useState([]);\n  console.log('tagCounts: ', tagCounts);\n  console.log('filteredTags global: ', filteredTags);\n  console.log('filteredPosts global: ', filteredPosts);\n  useEffect(() => {\n    tags.forEach(async tag => {\n      const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, {\n        tagID: tag._id\n      });\n\n      if (count > 0) {\n        const tagCount = {\n          _id: tag._id,\n          name: tag.name,\n          count\n        }; // TODO: Should i call all these at once??\n\n        setTagCounts(state => [...state, tagCount]);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    console.log('getFilteredPosts');\n    console.log('filteredTags: ', filteredTags);\n    filteredTags.forEach(async tag => {\n      console.log('tag: ', tag);\n      const post = await client.fetch(`\n                *[ _type == \"post\" && $tagID in tags[]._ref ]{\n                    ..., \n                    tags[]->{_id, name}\n                }[0]\n            `, {\n        tagID: tag\n      });\n      console.log('post: ', post);\n      setFilteredPosts(state => [...state, post]);\n    });\n  }, [filteredPosts]); // function getFilteredPosts() {\n  // }\n\n  function handleTagFilter(e) {\n    // console.log('e: ', e.target.id);\n    const selectedTagID = e.target.id; // console.log('selectedKeyword: ', selectedKeyword)\n\n    if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(state => [...state, selectedTagID]);\n    } else {\n      setFilteredTags(filteredTags.filter(tag => {\n        return tag !== selectedTagID;\n      }));\n    } // getFilteredPosts()\n\n  }\n\n  const postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), postsToRender.map(({\n    _id,\n    _createdAt,\n    description,\n    slug,\n    title\n  }) => __jsx(ListItem, {\n    key: _id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: \"/post/[slug]\",\n    as: `/post/${slug.current}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }\n  }, title)), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  }, description), __jsx(DateP, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, moment.utc(_createdAt).format(\"LL\")))));\n}\n\nexport async function getStaticProps() {\n  // TODO: should these be chained somehow?\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `);\n  return {\n    props: {\n      posts,\n      tags\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","DateP","p","Index","posts","tags","console","log","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","forEach","tag","count","fetch","tagID","_id","tagCount","name","state","post","handleTagFilter","e","selectedTagID","target","id","includes","filter","postsToRender","length","map","_createdAt","description","slug","title","current","utc","format","getStaticProps","props"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts, tags }) {\n    console.log('posts: ', posts)\n    console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    console.log('tagCounts: ', tagCounts)\n    console.log('filteredTags global: ', filteredTags)\n    console.log('filteredPosts global: ', filteredPosts)\n    \n    useEffect(() => {\n        tags.forEach(async tag => {\n            const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, { tagID: tag._id })\n\n            if (count > 0) {\n                const tagCount = {\n                    _id: tag._id,\n                    name: tag.name,\n                    count\n                }\n                // TODO: Should i call all these at once??\n                setTagCounts(state => [...state, tagCount])\n            }\n        })\n    }, [])\n\n    useEffect(() => {\n        console.log('getFilteredPosts')\n        console.log('filteredTags: ', filteredTags)\n        filteredTags.forEach(async tag => {\n            console.log('tag: ', tag)\n            const post = await client.fetch(`\n                *[ _type == \"post\" && $tagID in tags[]._ref ]{\n                    ..., \n                    tags[]->{_id, name}\n                }[0]\n            `, { tagID: tag })\n            console.log('post: ', post)\n            setFilteredPosts(state => [...state, post])\n        })\n    }, [filteredPosts])\n    // function getFilteredPosts() {\n        \n    // }\n\n    function handleTagFilter(e) {\n        // console.log('e: ', e.target.id);\n        const selectedTagID = e.target.id\n        // console.log('selectedKeyword: ', selectedKeyword)\n        if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n        // getFilteredPosts()\n    }\n\n    const postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n            />\n\n            <h2>Posts:</h2>\n\n            {postsToRender.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}