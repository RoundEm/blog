{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(250,223,147);\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.75em;\"]);\n\nfunction Index(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts,\n      tags = _ref.tags;\n  console.log('posts: ', posts);\n  console.log('tags: ', tags); // const [ allPosts, setAllPosts ] = useState(posts)\n\n  var _useState = useState(posts),\n      filteredPosts = _useState[0],\n      setFilteredPosts = _useState[1];\n\n  var _useState2 = useState([]),\n      tagCounts = _useState2[0],\n      setTagCounts = _useState2[1];\n\n  var _useState3 = useState([]),\n      filteredTags = _useState3[0],\n      setFilteredTags = _useState3[1];\n\n  console.log('tagCounts: ', tagCounts);\n  useEffect(function () {\n    tags.forEach(function _callee(tag) {\n      var count, tagCount;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(client.fetch(\"\\n                count(*[ _type == \\\"post\\\" && $tagID in tags[]._ref ])\\n            \", {\n                tagID: tag._id\n              }));\n\n            case 2:\n              count = _context.sent;\n\n              if (count > 0) {\n                tagCount = {\n                  _id: tag._id,\n                  name: tag.name,\n                  count: count\n                };\n                setTagCounts(function (state) {\n                  return [].concat(_toConsumableArray(state), [tagCount]);\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  }, []);\n\n  function getFilteredPosts() {\n    filteredTags.forEach(function _callee2(tag) {\n      var post;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(client.fetch(\"\\n                *[ _type == \\\"post\\\" && $tagID in tags[]._ref ]\\n            \", {\n                tagID: tag._id\n              }));\n\n            case 2:\n              post = _context2.sent;\n              console.log('posts: ', posts);\n              setFilteredPosts(function (state) {\n                return [].concat(_toConsumableArray(state), [post]);\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  }\n\n  function handleTagFilter(e) {\n    var selectedTag = e.target.firstChild.data; // console.log('selectedKeyword: ', selectedKeyword)\n\n    if (!filteredTags.includes(selectedTag)) {\n      setFilteredTags([].concat(_toConsumableArray(filteredTags), [selectedTag]));\n    } else {\n      setFilteredKeywords(filteredTags.filter(function (keyword) {\n        return keyword !== selectedKeyword;\n      }));\n    }\n\n    console.log('filteredKeywords: ', filteredKeywords);\n    getFilteredPosts();\n  }\n\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), filteredPosts.map(function (_ref2) {\n    var _id = _ref2._id,\n        _createdAt = _ref2._createdAt,\n        description = _ref2.description,\n        slug = _ref2.slug,\n        title = _ref2.title;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }, title)), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")));\n  }));\n}\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","DateP","p","Index","posts","tags","console","log","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","forEach","tag","fetch","tagID","_id","count","tagCount","name","state","getFilteredPosts","post","handleTagFilter","e","selectedTag","target","firstChild","data","includes","setFilteredKeywords","filter","keyword","selectedKeyword","filteredKeywords","map","_createdAt","description","slug","title","current","utc","format"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts, tags }) {\n    console.log('posts: ', posts)\n    console.log('tags: ', tags)\n    // const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState(posts)\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    console.log('tagCounts: ', tagCounts)\n    \n    useEffect(() => {\n        tags.forEach(async tag => {\n            const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, { tagID: tag._id })\n\n            if (count > 0) {\n                const tagCount = {\n                    _id: tag._id,\n                    name: tag.name,\n                    count\n                }\n                setTagCounts(state => [...state, tagCount])\n            }\n        })\n    }, [])\n\n    function getFilteredPosts() {\n        filteredTags.forEach(async tag => {\n            const post = await client.fetch(`\n                *[ _type == \"post\" && $tagID in tags[]._ref ]\n            `, { tagID: tag._id })\n            console.log('posts: ', posts)\n            setFilteredPosts(state => [...state, post])\n        })\n    }\n\n    function handleTagFilter(e) {\n        const selectedTag = e.target.firstChild.data\n        // console.log('selectedKeyword: ', selectedKeyword)\n        if (!filteredTags.includes(selectedTag)) {\n            setFilteredTags([...filteredTags, selectedTag])\n        } else {\n            setFilteredKeywords(filteredTags.filter(keyword => {\n               return keyword !== selectedKeyword\n            }))\n        }\n        console.log('filteredKeywords: ', filteredKeywords)\n        getFilteredPosts()\n    }\n\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n            />\n\n            <h2>Posts:</h2>\n            {filteredPosts.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        } | order(name asc)\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}