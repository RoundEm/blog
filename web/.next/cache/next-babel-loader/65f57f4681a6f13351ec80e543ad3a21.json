{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(250,223,147);\"]);\nconst TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-1\"\n})([\"display:inline-block;margin-right:5px;padding:2px 4;font-size:.5em;border:1px solid rgb(0,85,143);\"]);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-2\"\n})([\"font-size:.75em;\"]);\n\nfunction Index({\n  posts,\n  tags\n}) {\n  console.log('posts: ', posts); // console.log('tags: ', tags)\n\n  const {\n    0: allPosts,\n    1: setAllPosts\n  } = useState(posts);\n  const {\n    0: filteredPosts,\n    1: setFilteredPosts\n  } = useState([]);\n  const {\n    0: tagCounts,\n    1: setTagCounts\n  } = useState([]);\n  const {\n    0: filteredTags,\n    1: setFilteredTags\n  } = useState([]); // console.log('tagCounts: ', tagCounts)\n\n  console.log('filteredTags global: ', filteredTags);\n  console.log('filteredPosts global: ', filteredPosts);\n  useEffect(() => {\n    tags.forEach(async tag => {\n      const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, {\n        tagID: tag._id\n      }); // TODO: this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n\n      if (count > 0) {\n        const tagCount = {\n          _id: tag._id,\n          name: tag.name,\n          count\n        }; // TODO: Should i call all these at once??\n\n        setTagCounts(state => [...state, tagCount]);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    console.log('getFilteredPosts');\n    console.log('filteredTags useEffect: ', filteredTags); // TODO: not totally sure how this mounted variable \n    // and the cleanup function at the end are working\n    // to prevent react's memory leak warning:\n    // https://www.debuggr.io/react-update-unmounted-component/\n    // let mounted = true\n    // if (filteredTags.length > 0 && mounted) {\n\n    if (filteredTags.length > 0) {\n      // const allUniquePosts = []\n      const allMatchedPosts = filteredTags.map(tag => {\n        return client.fetch(`\n                    *[ _type == \"post\" && $tagID in tags[]._ref ]{\n                        ..., \n                        tags[]->{_id, name}\n                    }\n                `, {\n          tagID: tag\n        }); // console.log('matchedPosts after query: ', matchedPosts)\n        // const uniquePosts = matchedPosts.filter(matchedPost => {\n        //     console.log('matchedPost: ', matchedPost)\n        //     return filteredPosts.map(filteredPost => {\n        //         console.log('filteredPost: ', filteredPost)\n        //         return matchedPost._id !== filteredPost._id\n        //     })\n        // })\n        // console.log('uniquePosts: ', uniquePosts)\n        // allUniquePosts.push(...uniquePosts)\n      });\n      Promise.all(allMatchedPosts).then(data => {\n        // console.log('then', data)\n        const flattenedPosts = data.flat();\n\n        const uniqueArray = posts => [...new Set(posts.map(obj => JSON.stringify(obj)))].map(s => JSON.parse(s));\n\n        const uniquePosts = uniqueArray(flattenedPosts);\n        console.log('uniquePosts: ', uniquePosts);\n        setFilteredPosts(uniquePosts);\n      });\n      console.log('sadsadszddsa');\n    } else {\n      setFilteredPosts([]);\n    } // return () => mounted = false\n\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    const selectedTagID = e.target.id;\n\n    if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(state => [...state, selectedTagID]);\n    } else {\n      setFilteredTags(filteredTags.filter(tag => {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  const postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    filteredTags: filteredTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), postsToRender.map(({\n    _id,\n    _createdAt,\n    description,\n    slug,\n    title,\n    tags\n  }) => __jsx(ListItem, {\n    key: _id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: \"/post/[slug]\",\n    as: `/post/${slug.current}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, title)), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }, description), __jsx(DateP, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }\n  }, moment.utc(_createdAt).format(\"LL\")), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, tags.map(tag => {\n    return __jsx(TagListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 40\n      }\n    }, tag.name);\n  })))));\n}\n\nexport async function getStaticProps() {\n  // TODO: should these be chained somehow?\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `);\n  return {\n    props: {\n      posts,\n      tags\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","TagListItem","DateP","p","Index","posts","tags","console","log","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","forEach","tag","count","fetch","tagID","_id","tagCount","name","state","length","allMatchedPosts","map","Promise","all","then","data","flattenedPosts","flat","uniqueArray","Set","obj","JSON","stringify","s","parse","uniquePosts","handleTagFilter","e","selectedTagID","target","id","includes","filter","postsToRender","_createdAt","description","slug","title","current","utc","format","getStaticProps","props"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst TagListItem = styled.li`\n    display: inline-block;\n    margin-right: 5px;\n    padding: 2px 4;\n    font-size: .5em;\n    border: 1px solid rgb(0, 85, 143);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts, tags }) {\n    console.log('posts: ', posts)\n    // console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    // console.log('tagCounts: ', tagCounts)\n    console.log('filteredTags global: ', filteredTags)\n    console.log('filteredPosts global: ', filteredPosts)\n    \n    useEffect(() => {\n        tags.forEach(async tag => {\n            const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, { tagID: tag._id })\n            // TODO: this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n            if (count > 0) {\n                const tagCount = {\n                    _id: tag._id,\n                    name: tag.name,\n                    count\n                }\n                // TODO: Should i call all these at once??\n                setTagCounts(state => [...state, tagCount])\n            }\n        })\n    }, [])\n\n    \n    useEffect(() => {\n        console.log('getFilteredPosts')\n        console.log('filteredTags useEffect: ', filteredTags)\n\n        // TODO: not totally sure how this mounted variable \n        // and the cleanup function at the end are working\n        // to prevent react's memory leak warning:\n        // https://www.debuggr.io/react-update-unmounted-component/\n        // let mounted = true\n        // if (filteredTags.length > 0 && mounted) {\n        if (filteredTags.length > 0) {\n            // const allUniquePosts = []\n            const allMatchedPosts = filteredTags.map(tag => {\n                return client.fetch(`\n                    *[ _type == \"post\" && $tagID in tags[]._ref ]{\n                        ..., \n                        tags[]->{_id, name}\n                    }\n                `, { tagID: tag })\n                // console.log('matchedPosts after query: ', matchedPosts)\n                // const uniquePosts = matchedPosts.filter(matchedPost => {\n                //     console.log('matchedPost: ', matchedPost)\n                //     return filteredPosts.map(filteredPost => {\n                //         console.log('filteredPost: ', filteredPost)\n                //         return matchedPost._id !== filteredPost._id\n                //     })\n                // })\n                // console.log('uniquePosts: ', uniquePosts)\n                // allUniquePosts.push(...uniquePosts)\n            })\n            Promise.all(allMatchedPosts).then(data => {\n                // console.log('then', data)\n                const flattenedPosts = data.flat()\n                const uniqueArray = (posts) => [\n                    ...new Set(posts.map(obj => JSON.stringify(obj)))].map(s => JSON.parse(s));\n                const uniquePosts = uniqueArray(flattenedPosts)\n                console.log('uniquePosts: ', uniquePosts)\n                setFilteredPosts(uniquePosts)\n            })\n            console.log('sadsadszddsa')\n        } else {\n            setFilteredPosts([])\n        }\n        // return () => mounted = false\n    }, [filteredTags])\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n                filteredTags={filteredTags}\n            />\n\n            <h2>Posts:</h2>\n\n            {postsToRender.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                    tags\n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                        <ul>\n                            {tags.map(tag => {\n                                return <TagListItem>{tag.name}</TagListItem>\n                            })}\n                        </ul>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}