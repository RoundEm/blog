{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/posts/[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport HeaderLayout from '../../components/HeaderLayout';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Prism from 'prismjs/components/prism-core';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport themes from '../../colorsAndThemes';\nvar MainContent = styled.div.withConfig({\n  displayName: \"slug__MainContent\",\n  componentId: \"tg0oky-0\"\n})([\"margin-top:1.5em;font-size:1.15em;line-height:1.75em;\"]);\nvar PDesc = styled.p.withConfig({\n  displayName: \"slug__PDesc\",\n  componentId: \"tg0oky-1\"\n})([\"font-size:1.1em;color:\", \";margin:3px 0 0;\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.primaryColor;\n});\nvar PDate = styled(PDesc).withConfig({\n  displayName: \"slug__PDate\",\n  componentId: \"tg0oky-2\"\n})([\"font-size:1em;color:\", \";\"], function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.text;\n});\nvar PBlock = styled.p.withConfig({\n  displayName: \"slug__PBlock\",\n  componentId: \"tg0oky-3\"\n})([\"margin-bottom:1em;\"]);\nvar AsideBlock = styled.div.withConfig({\n  displayName: \"slug__AsideBlock\",\n  componentId: \"tg0oky-4\"\n})([\"margin-bottom:1em;\"]); // TODO: fix overflow and add horizontal scroll\n\nvar Pre = styled.pre.withConfig({\n  displayName: \"slug__Pre\",\n  componentId: \"tg0oky-5\"\n})([\"font-family:'Nanum Gothic Coding',monospace;font-size:.9em;overflow:auto;text-align:left;margin:1em 0;padding:0.5em;& .token-line{line-height:1.3em;height:1.3em;}\"]);\nvar LineNo = styled.span.withConfig({\n  displayName: \"slug__LineNo\",\n  componentId: \"tg0oky-6\"\n})([\"display:inline-block;width:2em;user-select:none;opacity:0.3;\"]); // TODO: add block type for blockquote-like content\n\nfunction Post(props) {\n  console.log('propsPost: ', props);\n  var postContent = [];\n\n  function paragraphBlock(content, key) {\n    return __jsx(PBlock, {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    }, content);\n  }\n\n  function asideStringNewlines(content, key) {\n    var contentArray = content.split('\\n');\n    console.log('contentArray: ', contentArray);\n    var renderedLines = [];\n\n    var _iterator = _createForOfIteratorHelper(contentArray),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var line = _step.value;\n        renderedLines.push(__jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 32\n          }\n        }, line));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return __jsx(AsideBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 16\n      }\n    }); // return <AsideBlock key={key}>{content}</AsideBlock>\n  }\n\n  function prismafyCodeBlock(content, _key) {\n    var _this = this;\n\n    return __jsx(Highlight, _extends({}, defaultProps, {\n      theme: props.themeString === 'light' ? themes.light.syntax : themes.dark.syntax,\n      code: content,\n      language: \"jsx\",\n      key: _key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }), function (_ref3) {\n      var className = _ref3.className,\n          style = _ref3.style,\n          tokens = _ref3.tokens,\n          getLineProps = _ref3.getLineProps,\n          getTokenProps = _ref3.getTokenProps;\n      return __jsx(Pre, {\n        className: className,\n        style: style,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }\n      }, tokens.map(function (line, i) {\n        return __jsx(\"div\", _extends({}, getLineProps({\n          line: line,\n          key: i\n        }), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }\n        }), __jsx(LineNo, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }\n        }, i + 1), line.map(function (token, key) {\n          return __jsx(\"span\", _extends({}, getTokenProps({\n            token: token,\n            key: key\n          }), {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 41\n            }\n          }));\n        }));\n      }));\n    });\n  }\n\n  props.body && props.body.forEach(function (section) {\n    // TODO: change to switch:\n    if (section._type === 'block') {\n      postContent.push(paragraphBlock(section.children[0].text, section._key));\n    } else if (section._type === 'code') {\n      postContent.push(prismafyCodeBlock(section.code, section._key));\n    } else if (section._type === 'post_aside') {\n      postContent.push(asideStringNewlines(section.string_content, section._key));\n    }\n  });\n  return __jsx(HeaderLayout, {\n    onToggleThemeClick: props.onToggleThemeClick,\n    themeString: props.themeString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, props.title), __jsx(PDesc, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, props.description), __jsx(PDate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, moment.utc(props._createdAt).format(\"LL\")), __jsx(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, postContent.map(function (content) {\n    return content;\n  }))));\n}\n\n// Post.getInitialProps = async function(context) {\n//     // default the slug so that it doesn't return \"undefined\"\n//     // console.log('context: ', context)\n//     const { slug = \"\" } = context.query\n//     const data = await client.fetch(`\n//         *[_type == \"post\" && slug.current == $slug][0]\n//     `, { slug })\n//     return data\n// }\nexport var __N_SSG = true;\nexport default Post;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/posts/[slug].js"],"names":["HeaderLayout","styled","moment","Prism","Highlight","defaultProps","themes","MainContent","div","PDesc","p","theme","primaryColor","PDate","text","PBlock","AsideBlock","Pre","pre","LineNo","span","Post","props","console","log","postContent","paragraphBlock","content","key","asideStringNewlines","contentArray","split","renderedLines","line","push","prismafyCodeBlock","_key","themeString","light","syntax","dark","className","style","tokens","getLineProps","getTokenProps","map","i","token","body","forEach","section","_type","children","code","string_content","onToggleThemeClick","title","description","utc","_createdAt","format"],"mappings":"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","sourcesContent":["import client from '../../client'\nimport HeaderLayout from '../../components/HeaderLayout'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport Prism from 'prismjs/components/prism-core'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport themes from '../../colorsAndThemes'\n\nconst MainContent = styled.div`\n    margin-top: 1.5em;\n    font-size: 1.15em;\n    line-height: 1.75em;\n`\nconst PDesc = styled.p`\n    font-size: 1.1em;\n    color: ${({ theme }) => theme.primaryColor};\n    margin: 3px 0 0;\n`\nconst PDate = styled(PDesc)`\n    font-size: 1em;\n    color: ${({ theme }) => theme.text};\n`\nconst PBlock = styled.p`\n    margin-bottom: 1em;\n`\nconst AsideBlock = styled.div`\n    margin-bottom: 1em;\n`\n// TODO: fix overflow and add horizontal scroll\nconst Pre = styled.pre`\n    /* font-family: 'Courier Prime', monospace;\n    font-family: 'Cutive Mono', monospace; */\n    font-family: 'Nanum Gothic Coding', monospace;\n    font-size: .9em;\n    overflow: auto;\n    text-align: left;\n    margin: 1em 0;\n    padding: 0.5em;\n    & .token-line {\n        line-height: 1.3em;\n        height: 1.3em;\n    }\n    /* box-shadow: 0px 6px 7px -4px; */\n`\nconst LineNo = styled.span`\n    display: inline-block;\n    width: 2em;\n    user-select: none;\n    opacity: 0.3;\n`\n// TODO: add block type for blockquote-like content\n\nfunction Post(props) {\n    console.log('propsPost: ', props)\n    const postContent = []\n\n    function paragraphBlock(content, key) {\n        return <PBlock key={key}>{content}</PBlock>\n    }\n\n    function asideStringNewlines(content, key) {\n        const contentArray = content.split('\\n')\n        console.log('contentArray: ', contentArray)\n        const renderedLines = []\n        for (const line of contentArray) {\n            renderedLines.push(<div>{line}</div>)\n        }\n        return <AsideBlock></AsideBlock>\n        // return <AsideBlock key={key}>{content}</AsideBlock>\n    }\n    \n    function prismafyCodeBlock(content, _key) {\n        return (\n            <Highlight \n                {...defaultProps} \n                theme={\n                    props.themeString === 'light'\n                        ? themes.light.syntax\n                        : themes.dark.syntax\n                } \n                code={content} \n                language=\"jsx\"\n                key={_key}\n            >\n                {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                    <Pre className={className} style={style}>\n                        {tokens.map((line, i) => (\n                            <div {...getLineProps({ line, key: i })}>\n                                <LineNo>{i + 1}</LineNo>\n                                {line.map((token, key) => {\n                                    return (\n                                        <span {...getTokenProps({ token, key })} />\n                                    )\n                                })}\n                            </div>\n                        ))}\n                    </Pre>\n                )}\n            </Highlight>\n        )\n    }\n\n    props.body && props.body.forEach(section => {\n        // TODO: change to switch:\n        if (section._type === 'block') {\n            postContent.push(\n                paragraphBlock(\n                    section.children[0].text, section._key\n                )\n            )\n        } else if (section._type === 'code') {\n            postContent.push(\n                prismafyCodeBlock(section.code, section._key)\n            )\n        } else if (section._type === 'post_aside') {\n            postContent.push(\n                asideStringNewlines(\n                    section.string_content, section._key\n                )\n            )\n        }\n    })\n\n    return (\n        <HeaderLayout \n            onToggleThemeClick={props.onToggleThemeClick}\n            themeString={props.themeString}\n        >\n            <article>\n                <h2>{props.title}</h2>\n                <PDesc>{props.description}</PDesc>\n                {/* // TODO: Add _updatedAt field? */}\n                <PDate>{moment.utc(props._createdAt).format(\"LL\")}</PDate>\n                <MainContent>\n                    {postContent.map(content => content)}\n                </MainContent>\n            </article>\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticPaths() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n    // Get the paths we want to pre-render based on posts\n    const paths = posts.map(post => ({\n        params: { slug: post.slug.current },\n    }))\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n  \nexport async function getStaticProps(context) {\n    const { slug } = context.params\n    const post = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, { slug } )\n    return { props: post }\n}\n  \n// Post.getInitialProps = async function(context) {\n//     // default the slug so that it doesn't return \"undefined\"\n//     // console.log('context: ', context)\n//     const { slug = \"\" } = context.query\n//     const data = await client.fetch(`\n//         *[_type == \"post\" && slug.current == $slug][0]\n//     `, { slug })\n//     return data\n// }\n\nexport default Post"]},"metadata":{},"sourceType":"module"}