{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(0,85,143);\"]);\nvar TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-1\"\n})([\"display:inline-block;margin-right:5px;padding:3px 5px;font-size:.5em;background-color:rgb(250,223,147);\"]);\nvar DescP = styled.p.withConfig({\n  displayName: \"pages__DescP\",\n  componentId: \"nuslkc-2\"\n})([\"font-size:.85em;\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-3\"\n})([\"font-size:.7em;\"]); // removes duplicate post objects by converting\n// each post into a JSON string so that they can be\n// compared and filtered using Set, then parsing the final \n// unique array of posts back to a normal array of objects\n\nfunction uniquePostsArray(posts) {\n  return _toConsumableArray(new Set(posts.map(function (postObj) {\n    return JSON.stringify(postObj);\n  }))).map(function (postStr) {\n    return JSON.parse(postStr);\n  });\n}\n\nfunction Index(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts,\n      tags = _ref.tags;\n  console.log('posts: ', posts);\n  console.log('tags: ', tags);\n\n  var _useState = useState(posts),\n      allPosts = _useState[0],\n      setAllPosts = _useState[1];\n\n  var _useState2 = useState([]),\n      filteredPosts = _useState2[0],\n      setFilteredPosts = _useState2[1];\n\n  var _useState3 = useState([]),\n      tagCounts = _useState3[0],\n      setTagCounts = _useState3[1];\n\n  var _useState4 = useState([]),\n      filteredTags = _useState4[0],\n      setFilteredTags = _useState4[1];\n\n  console.log('filteredTags global: ', filteredTags);\n  console.log('filteredPosts global: ', filteredPosts);\n  useEffect(function () {\n    var _tagCountPromises = tags.reduce(function _callee(acc, tag) {\n      var count;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(client.fetch(\"\\n                count(*[ _type == \\\"post\\\" && $tagID in tags[]._ref ])\\n            \", {\n                tagID: tag._id\n              }));\n\n            case 2:\n              count = _context.sent;\n              // TODO: this check is in case i've added a tag in \n              // sanity studio but haven't assigned it to a post yet:\n              console.log('count: ', count);\n\n              if (count > 0) {\n                acc.push({\n                  _id: tag._id,\n                  name: tag.name,\n                  count: count\n                }); // TODO: Should i call all these at once??\n                // setTagCounts(state => [...state, tagCount])\n              }\n\n              return _context.abrupt(\"return\", acc);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, []);\n\n    Promise.all(_tagCountPromises).then(function (_tagCounts) {\n      console.log('_tagCounts: ', _tagCounts);\n      setTagCounts(_tagCounts);\n    });\n  }, []);\n  useEffect(function () {\n    if (filteredTags.length > 0) {\n      var _filteredPosts = [];\n      allPosts.forEach(function (post) {\n        post.tags.forEach(function (tag) {\n          if (filteredTags.includes(tag._id)) {\n            _filteredPosts.push(post);\n          }\n        });\n      }); // console.log('_filteredPosts: ', _filteredPosts)\n\n      setFilteredPosts(uniquePostsArray(_filteredPosts));\n    } else {\n      setFilteredPosts([]);\n    }\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    var selectedTagID = e.target.id;\n\n    if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(function (state) {\n        return [].concat(_toConsumableArray(state), [selectedTagID]);\n      });\n    } else {\n      setFilteredTags(filteredTags.filter(function (tag) {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  var postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    filteredTags: filteredTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), postsToRender.map(function (_ref2) {\n    var _id = _ref2._id,\n        _createdAt = _ref2._createdAt,\n        description = _ref2.description,\n        slug = _ref2.slug,\n        title = _ref2.title,\n        tags = _ref2.tags;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }, title)), __jsx(DescP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")), __jsx(\"ul\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }, tags.map(function (tag) {\n      return __jsx(TagListItem, {\n        key: tag._id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 37\n        }\n      }, tag.name);\n    })));\n  }));\n}\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","TagListItem","DescP","p","DateP","uniquePostsArray","posts","Set","map","postObj","JSON","stringify","postStr","parse","Index","tags","console","log","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","_tagCountPromises","reduce","acc","tag","fetch","tagID","_id","count","push","name","Promise","all","then","_tagCounts","length","_filteredPosts","forEach","post","includes","handleTagFilter","e","selectedTagID","target","id","state","filter","postsToRender","_createdAt","description","slug","title","current","utc","format"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(0, 85, 143);\n`\nconst TagListItem = styled.li`\n    display: inline-block;\n    margin-right: 5px;\n    padding: 3px 5px;\n    font-size: .5em;\n    background-color: rgb(250, 223, 147);\n`\nconst DescP = styled.p`\n    font-size: .85em;\n`\nconst DateP = styled.p`\n    font-size: .7em;\n`\n\n// removes duplicate post objects by converting\n// each post into a JSON string so that they can be\n// compared and filtered using Set, then parsing the final \n// unique array of posts back to a normal array of objects\nfunction uniquePostsArray(posts) {\n    return [\n        ...new Set(posts.map(postObj => {\n            return JSON.stringify(postObj)\n        }))\n    ].map(postStr => {\n       return JSON.parse(postStr)\n    })\n}\n\nfunction Index({ posts, tags }) {\n    console.log('posts: ', posts)\n    console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    console.log('filteredTags global: ', filteredTags)\n    console.log('filteredPosts global: ', filteredPosts)\n    \n    useEffect(() => {\n        const _tagCountPromises = tags.reduce(async (acc, tag) => {\n            const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, { tagID: tag._id })\n            // TODO: this check is in case i've added a tag in \n            // sanity studio but haven't assigned it to a post yet:\n            console.log('count: ', count)\n            if (count > 0) {\n                acc.push({\n                    _id: tag._id,\n                    name: tag.name,\n                    count\n                })\n                // TODO: Should i call all these at once??\n                // setTagCounts(state => [...state, tagCount])\n            }\n            return acc\n            // console.log('_tagCounts: ', _tagCounts)\n        }, [])\n        \n        Promise.all(_tagCountPromises).then(_tagCounts => {\n            console.log('_tagCounts: ', _tagCounts)\n            setTagCounts(_tagCounts)\n        })\n        \n    }, [])\n\n    useEffect(() => {\n        if (filteredTags.length > 0) {\n            const _filteredPosts = []\n            allPosts.forEach(post => {\n                post.tags.forEach(tag => {\n                    if (filteredTags.includes(tag._id)) {\n                        _filteredPosts.push(post)\n                    }\n                })\n            })\n            // console.log('_filteredPosts: ', _filteredPosts)\n            setFilteredPosts(uniquePostsArray(_filteredPosts))\n        } else {\n            setFilteredPosts([])\n        }\n    }, [filteredTags])\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n                filteredTags={filteredTags}\n            />\n\n            <h2>Posts:</h2>\n\n            {postsToRender.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                    tags\n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <DescP>{description}</DescP>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                        <ul>\n                            {tags.map(tag => {\n                                return (\n                                    <TagListItem key={tag._id}>\n                                        {tag.name}\n                                    </TagListItem>\n                                )\n                                \n                            })}\n                        </ul>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}