{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(250,223,147);\"]);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.75em;\"]);\n\nfunction Index({\n  posts,\n  tags\n}) {\n  console.log('posts: ', posts);\n  console.log('tags: ', tags);\n  const {\n    0: allPosts,\n    1: setAllPosts\n  } = useState(posts);\n  const {\n    0: filteredPosts,\n    1: setFilteredPosts\n  } = useState(posts);\n  const {\n    0: tagCounts,\n    1: setTagCounts\n  } = useState([]);\n  const {\n    0: filteredKeywords,\n    1: setFilteredKeywords\n  } = useState([]);\n  allPosts.forEach(post => {\n    post.tags.forEach(async tag => {\n      const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, {\n        tagID: tag._id\n      });\n      console.log('post: ', post, 'count: ', count);\n    });\n    const tagCount = {};\n    setTagCounts;\n  });\n\n  async function getFilteredPosts() {\n    const posts = await client.fetch(`\n            *[ _type == \"post\" && $tagID in tags[]._ref ]\n        `, {});\n    console.log('posts: ', posts);\n    setFilteredPosts(posts);\n  }\n\n  function handleTagFilter(e) {\n    const selectedKeyword = e.target.firstChild.data; // console.log('selectedKeyword: ', selectedKeyword)\n\n    if (!filteredKeywords.includes(selectedKeyword)) {\n      setFilteredKeywords([...filteredKeywords, selectedKeyword]);\n    } else {\n      setFilteredKeywords(filteredKeywords.filter(keyword => {\n        return keyword !== selectedKeyword;\n      }));\n    }\n\n    console.log('filteredKeywords: ', filteredKeywords);\n    getFilteredPosts();\n  }\n\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: allPosts,\n    handleTagFilter: handleTagFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), filteredPosts.map(({\n    _id,\n    _createdAt,\n    description,\n    slug,\n    title\n  }) => __jsx(ListItem, {\n    key: _id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: \"/post/[slug]\",\n    as: `/post/${slug.current}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }, title)), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, description), __jsx(DateP, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, moment.utc(_createdAt).format(\"LL\")))));\n}\n\nexport async function getStaticProps() {\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  const tags = await client.fetch(`\n        *[ _type == \"tag\" ]{\n            _id, name\n        }\n    `);\n  return {\n    props: {\n      posts,\n      tags\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","styled","moment","HeaderLayout","KeywordTags","ListItem","li","DateP","p","Index","posts","tags","console","log","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredKeywords","setFilteredKeywords","forEach","post","tag","count","fetch","tagID","_id","tagCount","getFilteredPosts","handleTagFilter","e","selectedKeyword","target","firstChild","data","includes","filter","keyword","map","_createdAt","description","slug","title","current","utc","format","getStaticProps","props"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts, tags }) {\n    console.log('posts: ', posts)\n    console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState(posts)\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredKeywords, setFilteredKeywords ] = useState([])\n    \n    allPosts.forEach(post => {\n        post.tags.forEach(async (tag) => {\n            const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, { tagID: tag._id })\n            console.log('post: ', post, 'count: ', count)\n        })\n        const tagCount = {\n            \n        }\n        setTagCounts\n    })\n\n    async function getFilteredPosts() {\n        const posts = await client.fetch(`\n            *[ _type == \"post\" && $tagID in tags[]._ref ]\n        `, { })\n        console.log('posts: ', posts)\n        setFilteredPosts(posts)\n    }\n\n    function handleTagFilter(e) {\n        const selectedKeyword = e.target.firstChild.data\n        // console.log('selectedKeyword: ', selectedKeyword)\n        if (!filteredKeywords.includes(selectedKeyword)) {\n            setFilteredKeywords([...filteredKeywords, selectedKeyword])\n        } else {\n            setFilteredKeywords(filteredKeywords.filter(keyword => {\n               return keyword !== selectedKeyword\n            }))\n        }\n        console.log('filteredKeywords: ', filteredKeywords)\n        getFilteredPosts()\n    }\n\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={allPosts}\n                handleTagFilter={handleTagFilter}\n            />\n\n            <h2>Posts:</h2>\n            {filteredPosts.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ]{\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}