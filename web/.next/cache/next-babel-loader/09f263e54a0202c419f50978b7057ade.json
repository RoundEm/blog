{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/post/[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport client from '../../client';\nimport HeaderLayout from '../../components/HeaderLayout';\nimport styled from 'styled-components';\nimport moment from 'moment'; // import Prism from 'prismjs/components/prism-core'\n\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport themes from '../../colorsAndThemes'; // TODO: import both light and dark theme in one line. Can it also be combined with above improt?\n\nconsole.log('themes: ', themes);\nconst MainContent = styled.div.withConfig({\n  displayName: \"slug__MainContent\",\n  componentId: \"sc-1e354jq-0\"\n})([\"margin-top:1.5em;font-size:1.15em;line-height:1.75em;\"]);\nconst PDesc = styled.p.withConfig({\n  displayName: \"slug__PDesc\",\n  componentId: \"sc-1e354jq-1\"\n})([\"font-size:1.1em;color:\", \";margin:3px 0 0;\"], ({\n  theme\n}) => theme.primaryColor);\nconst PDate = styled(PDesc).withConfig({\n  displayName: \"slug__PDate\",\n  componentId: \"sc-1e354jq-2\"\n})([\"font-size:1em;color:\", \";\"], ({\n  theme\n}) => theme.text);\nconst PBlock = styled.p.withConfig({\n  displayName: \"slug__PBlock\",\n  componentId: \"sc-1e354jq-3\"\n})([\"margin-bottom:1em;\"]); // TODO: fix overflow and add horizontal scroll\n\nconst Pre = styled.pre.withConfig({\n  displayName: \"slug__Pre\",\n  componentId: \"sc-1e354jq-4\"\n})([\"font-family:'Nanum Gothic Coding',monospace;font-size:.9em;overflow:auto;text-align:left;margin:1em 0;padding:0.5em;& .token-line{line-height:1.3em;height:1.3em;}\"]);\nconst LineNo = styled.span.withConfig({\n  displayName: \"slug__LineNo\",\n  componentId: \"sc-1e354jq-5\"\n})([\"display:inline-block;width:2em;user-select:none;opacity:0.3;\"]); // TODO: add block type for blockquote-like content\n\nfunction Post(props) {\n  console.log('propsPost: ', props);\n  const postContent = [];\n\n  function formatParagraphBlock(content, key) {\n    return __jsx(PBlock, {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    }, content);\n  }\n\n  function prismafyCodeBlock(content, _key) {\n    return __jsx(Highlight, _extends({}, defaultProps, {\n      theme: props.themeString === 'light' ? themes.light.syntax : themes.dark.syntax,\n      code: content,\n      language: \"jsx\",\n      key: _key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }), ({\n      className,\n      style,\n      tokens,\n      getLineProps,\n      getTokenProps\n    }) => __jsx(Pre, {\n      className: className,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, tokens.map((line, i) => __jsx(\"div\", _extends({}, getLineProps({\n      line,\n      key: i\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    }), __jsx(LineNo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, i + 1), line.map((token, key) => {\n      return __jsx(\"span\", _extends({}, getTokenProps({\n        token,\n        key\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 41\n        }\n      }));\n    })))));\n  }\n\n  props.body && props.body.forEach(section => {\n    if (section._type === 'block') {\n      postContent.push(formatParagraphBlock(section.children[0].text, section._key));\n    } else if (section._type === 'code') {\n      postContent.push(prismafyCodeBlock(section.code, section._key));\n    }\n  }); // console.log('postContent: ', postContent)\n\n  return __jsx(HeaderLayout, {\n    onToggleThemeClick: props.onToggleThemeClick,\n    themeString: props.themeString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, props.title), __jsx(PDesc, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, props.description), __jsx(PDate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, moment.utc(props._createdAt).format(\"LL\")), __jsx(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, postContent.map(content => content))));\n}\n\nPost.getInitialProps = async function (context) {\n  // default the slug so that it doesn't return \"undefined\"\n  // console.log('context: ', context)\n  const {\n    slug = \"\"\n  } = context.query;\n  const data = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, {\n    slug\n  });\n  return data;\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/post/[slug].js"],"names":["client","HeaderLayout","styled","moment","Highlight","defaultProps","themes","console","log","MainContent","div","PDesc","p","theme","primaryColor","PDate","text","PBlock","Pre","pre","LineNo","span","Post","props","postContent","formatParagraphBlock","content","key","prismafyCodeBlock","_key","themeString","light","syntax","dark","className","style","tokens","getLineProps","getTokenProps","map","line","i","token","body","forEach","section","_type","push","children","code","onToggleThemeClick","title","description","utc","_createdAt","format","getInitialProps","context","slug","query","data","fetch"],"mappings":"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","sourcesContent":["import client from '../../client'\nimport HeaderLayout from '../../components/HeaderLayout'\nimport styled from 'styled-components'\nimport moment from 'moment'\n// import Prism from 'prismjs/components/prism-core'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport themes from '../../colorsAndThemes'\n// TODO: import both light and dark theme in one line. Can it also be combined with above improt?\nconsole.log('themes: ', themes)\n\nconst MainContent = styled.div`\n    margin-top: 1.5em;\n    font-size: 1.15em;\n    line-height: 1.75em;\n`\nconst PDesc = styled.p`\n    font-size: 1.1em;\n    color: ${({ theme }) => theme.primaryColor};\n    margin: 3px 0 0;\n`\nconst PDate = styled(PDesc)`\n    font-size: 1em;\n    color: ${({ theme }) => theme.text};\n`\nconst PBlock = styled.p`\n    margin-bottom: 1em;\n`\n// TODO: fix overflow and add horizontal scroll\nconst Pre = styled.pre`\n    /* font-family: 'Courier Prime', monospace;\n    font-family: 'Cutive Mono', monospace; */\n    font-family: 'Nanum Gothic Coding', monospace;\n    font-size: .9em;\n    overflow: auto;\n    text-align: left;\n    margin: 1em 0;\n    padding: 0.5em;\n    & .token-line {\n        line-height: 1.3em;\n        height: 1.3em;\n    }\n    /* box-shadow: 0px 6px 7px -4px; */\n`\nconst LineNo = styled.span`\n    display: inline-block;\n    width: 2em;\n    user-select: none;\n    opacity: 0.3;\n`\n// TODO: add block type for blockquote-like content\n\n\n\nfunction Post(props) {\n    console.log('propsPost: ', props)\n    const postContent = []\n    function formatParagraphBlock(content, key) {\n        return <PBlock key={key}>{content}</PBlock>\n    }\n    \n    function prismafyCodeBlock(content, _key) {\n        return (\n            <Highlight \n                {...defaultProps} \n                theme={\n                    props.themeString === 'light'\n                        ? themes.light.syntax\n                        : themes.dark.syntax\n                } \n                code={content} \n                language=\"jsx\"\n                key={_key}\n            >\n                {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                    <Pre className={className} style={style}>\n                        {tokens.map((line, i) => (\n                            <div {...getLineProps({ line, key: i })}>\n                                <LineNo>{i + 1}</LineNo>\n                                {line.map((token, key) => {\n                                    return (\n                                        <span {...getTokenProps({ token, key })} />\n                                    )\n                                })}\n                            </div>\n                        ))}\n                    </Pre>\n                )}\n            </Highlight>\n        )\n    }\n\n    \n    props.body && props.body.forEach(section => {\n        if (section._type === 'block') {\n            postContent.push(\n                formatParagraphBlock(section.children[0].text, section._key)\n            )\n        } else if (section._type === 'code') {\n            postContent.push(\n                prismafyCodeBlock(section.code, section._key)\n            )\n        }\n    })\n\n    // console.log('postContent: ', postContent)\n    return (\n        <HeaderLayout \n            onToggleThemeClick={props.onToggleThemeClick}\n            themeString={props.themeString}\n        >\n            <article>\n                <h2>{props.title}</h2>\n                <PDesc>{props.description}</PDesc>\n                {/* // TODO: Add _updatedAt field? */}\n                <PDate>{moment.utc(props._createdAt).format(\"LL\")}</PDate>\n                <MainContent>\n                    {postContent.map(content => content)}\n                </MainContent>\n            </article>\n        </HeaderLayout>\n    )\n}\n\nPost.getInitialProps = async function(context) {\n    // default the slug so that it doesn't return \"undefined\"\n    // console.log('context: ', context)\n    const { slug = \"\" } = context.query\n    const data = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, { slug })\n    return data\n}\n\nexport default Post"]},"metadata":{},"sourceType":"module"}