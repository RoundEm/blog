{"version":3,"file":"static/webpack/static/development/pages/index.js.f7ccea7aa47ee21dfab9.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts }) {\n    console.log('posts: ', posts)\n    const [ filteredKeywords, setFilteredKeywords ] = useState([])\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n\n    async function getFilteredPosts() {\n        const posts = await client.fetch(`\n            *[ _type == \"post\" && tag.name in $filteredKeywords]{\n                ..., \n                tags[]->{_id, name}\n            }\n        `, { filteredKeywords })\n        console.log('posts: ', posts)\n        setFilteredPosts(posts)\n    }\n\n    function handleTagFilter(e) {\n        const selectedKeyword = e.target.firstChild.data\n        // console.log('selectedKeyword: ', selectedKeyword)\n        if (!filteredKeywords.includes(selectedKeyword)) {\n            setFilteredKeywords([...filteredKeywords, selectedKeyword])\n        } else {\n            setFilteredKeywords(filteredKeywords.filter(keyword => keyword !== selectedKeyword))\n        }\n        console.log('filteredKeywords: ', filteredKeywords)\n        getFilteredPosts()\n    }\n\n    // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n    \n    // const tagCountsArray = []\n    // for (const [ tag, count ] of Object.entries(tags)) {\n    //     tagCountsArray.push({\n    //         'name': tag,\n    //         count,\n    //         _id\n    //     })\n    // }\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                // tags={tagCountsArray}\n                handleTagFilter={handleTagFilter}\n            />\n\n            <h2>Posts:</h2>\n            {posts.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    return { props: { posts } }\n}\n\nexport default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAPA;AACA;AAMA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAuBA;AACA;;AAYA;;;;A","sourceRoot":""}