{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// import { useEffect, useState } from 'react'\nimport Link from 'next/link';\nimport client from '../../client';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport HeaderLayout from '../../components/HeaderLayout';\nimport themes, { colors } from '../../colorsAndThemes';\nconst MainContent = styled.div.withConfig({\n  displayName: \"slug__MainContent\",\n  componentId: \"tg0oky-0\"\n})([\"margin-top:1.5em;font-size:1.15em;line-height:1.75em;\"]);\nconst PDesc = styled.p.withConfig({\n  displayName: \"slug__PDesc\",\n  componentId: \"tg0oky-1\"\n})([\"font-size:1.1em;color:\", \";margin:3px 0 0;\"], ({\n  theme\n}) => theme.primaryColor);\nconst PDate = styled(PDesc).withConfig({\n  displayName: \"slug__PDate\",\n  componentId: \"tg0oky-2\"\n})([\"font-size:1em;color:\", \";\"], ({\n  theme\n}) => theme.text);\nconst PBlock = styled.p.withConfig({\n  displayName: \"slug__PBlock\",\n  componentId: \"tg0oky-3\"\n})([\"margin-bottom:1em;\"]);\nconst AsideBlock = styled.div.withConfig({\n  displayName: \"slug__AsideBlock\",\n  componentId: \"tg0oky-4\"\n})([\"margin-bottom:1em;padding:1em 2em;background-color:\", \";font-size:.9em;border-left:1px solid rgba(114,143,203,.5);\"], ({\n  theme\n}) => theme.asideBackground);\nconst Pre = styled.pre.withConfig({\n  displayName: \"slug__Pre\",\n  componentId: \"tg0oky-5\"\n})([\"font-family:'Nanum Gothic Coding',monospace;font-size:.9em;overflow:auto;text-align:left;margin:1em 0;padding:0.5em;& .token-line{line-height:1.4em;height:1.3em;}\"]);\nconst LineNo = styled.span.withConfig({\n  displayName: \"slug__LineNo\",\n  componentId: \"tg0oky-6\"\n})([\"display:inline-block;width:2em;user-select:none;opacity:0.3;\"]);\nconst ExternalLink = styled.a.withConfig({\n  displayName: \"slug__ExternalLink\",\n  componentId: \"tg0oky-7\"\n})([\"text-decoration:underline;color:\", \";\"], ({\n  theme\n}) => theme.articleLinks);\nconst Button = styled.button.withConfig({\n  displayName: \"slug__Button\",\n  componentId: \"tg0oky-8\"\n})([\"font-size:.8em;font-weight:bold;display:block;margin:auto;\"]);\n\nfunction Post(props) {\n  console.log('propsPost: ', props); // useEffect(() => {\n  //     window.addEventListener('scroll', handleScroll)\n  //     return () => window.removeEventListener('scroll', handleScroll)\n  // }, [])\n  // function handleScroll(e) {\n  //     console.log('handleScroll e: ', e.target.scrollingElement.scrollTop)\n  // }\n\n  function handleScrollToTop() {\n    window.scroll({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }\n\n  const postContent = []; // TODO: change these to use functional loops?:\n\n  function paragraphBlock(section) {\n    // console.log('paraSection: ', section)\n    const blockContent = [];\n\n    for (let i = 0; i < section.children.length; i++) {\n      if (section.children[i].marks.length > 0) {\n        for (let j = 0; j < section.markDefs.length; j++) {\n          if (section.markDefs[j]._key === section.children[i].marks[0]) {\n            blockContent.push(__jsx(ExternalLink, {\n              target: \"_blank\",\n              href: section.markDefs[j].href,\n              key: section.markDefs[j]._key\n            }, section.children[i].text));\n          }\n        }\n      } else {\n        blockContent.push(section.children[i].text);\n      }\n    } // console.log('blockContent: ', blockContent)\n\n\n    return __jsx(PBlock, {\n      key: section._key\n    }, blockContent);\n  }\n\n  function asideStringNewlines(content, _key) {\n    const contentArray = content.split('\\n'); // console.log('contentArray: ', contentArray)\n\n    const renderedLines = [];\n\n    for (let i = 0; i < contentArray.length; i++) {\n      renderedLines.push(__jsx(\"div\", {\n        key: i\n      }, contentArray[i]));\n    }\n\n    return __jsx(AsideBlock, {\n      key: _key\n    }, renderedLines);\n  }\n\n  function prismafyCodeBlock(content, _key) {\n    return __jsx(Highlight, _extends({}, defaultProps, {\n      theme: props.themeString === 'light' ? themes.light.syntax : themes.dark.syntax,\n      code: content,\n      language: \"jsx\",\n      key: _key\n    }), ({\n      className,\n      style,\n      tokens,\n      getLineProps,\n      getTokenProps\n    }) => __jsx(Pre, {\n      className: className,\n      style: style\n    }, tokens.map((line, i) => __jsx(\"div\", getLineProps({\n      line,\n      key: i\n    }), __jsx(LineNo, null, i + 1), line.map((token, key) => {\n      return __jsx(\"span\", getTokenProps({\n        token,\n        key\n      }));\n    })))));\n  }\n\n  props.body && props.body.forEach(section => {\n    switch (section._type) {\n      case 'block':\n        postContent.push(paragraphBlock(section));\n        break;\n\n      case 'code':\n        postContent.push(prismafyCodeBlock(section.code, section._key));\n        break;\n\n      case 'post_aside':\n        postContent.push(asideStringNewlines(section.str_content_newline, section._key));\n        break;\n      // default:\n      //     console.log('default case')\n    } // console.log('postContent: ', postContent)\n\n  });\n  return __jsx(HeaderLayout, {\n    onToggleThemeClick: props.onToggleThemeClick,\n    themeString: props.themeString\n  }, __jsx(\"article\", null, __jsx(\"h2\", null, props.title), __jsx(PDesc, null, props.description), __jsx(PDate, null, props.manual_pub_date ? moment.utc(props.manual_pub_date).format(\"LL\") : moment.utc(props._createdAt).format(\"LL\")), __jsx(MainContent, null, postContent.map(content => content))), __jsx(Button, {\n    onClick: handleScrollToTop\n  }, \"Back to top\"), __jsx(\"br\", null), __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, __jsx(Button, null, \"Blog Home\"))));\n}\n\nexport async function getStaticPaths() {\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => ({\n    params: {\n      slug: post.slug.current\n    }\n  })); // Pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  const {\n    slug\n  } = context.params;\n  const post = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, {\n    slug\n  });\n  return {\n    props: post\n  };\n} // Post.getInitialProps = async function(context) {\n//     // default the slug so that it doesn't return \"undefined\"\n//     // console.log('context: ', context)\n//     const { slug = \"\" } = context.query\n//     const data = await client.fetch(`\n//         *[_type == \"post\" && slug.current == $slug][0]\n//     `, { slug })\n//     return data\n// }\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}