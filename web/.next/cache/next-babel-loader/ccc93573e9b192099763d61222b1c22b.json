{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/post/[slug].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { useRouter } from 'next/router'\nimport sanityClient from '../client';\n\nvar Post = function Post(props) {\n  var router = useRouter();\n  return __jsx(\"article\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }, props.slug.current));\n};\n\nPost.getInitialProps = function _callee(context) {\n  var _context$query$slug, slug;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // It's important to default the slug so that it doesn't return \"undefined\"\n          _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? \"\" : _context$query$slug;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(client.fetch(\"\\n        *[_type == \\\"post\\\" && slug.current == $slug][0]\\n    \", {\n            slug: slug\n          }));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/post/[slug].js"],"names":["sanityClient","Post","props","router","useRouter","slug","current","getInitialProps","context","query","client","fetch"],"mappings":";;;;;;;AAAA;AACA,OAAOA,YAAP,MAAyB,WAAzB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AACpB,MAAMC,MAAM,GAAGC,SAAS,EAAxB;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,KAAK,CAACG,IAAN,CAAWC,OAAhB,CADJ,CADJ;AAKH,CAPD;;AASAL,IAAI,CAACM,eAAL,GAAuB,iBAAeC,OAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnB;AADmB,gCAEGA,OAAO,CAACC,KAFX,CAEXJ,IAFW,EAEXA,IAFW,oCAEJ,EAFI;AAAA;AAAA,2CAGNK,MAAM,CAACC,KAAP,qEAEV;AAAEN,YAAAA,IAAI,EAAJA;AAAF,WAFU,CAHM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAQA,eAAeJ,IAAf","sourcesContent":["// import { useRouter } from 'next/router'\nimport sanityClient from '../client'\n\nconst Post = (props) => {\n    const router = useRouter()\n    return (\n        <article>\n            <h1>{props.slug.current}</h1>\n        </article>\n    )\n}\n\nPost.getInitialProps = async function(context) {\n    // It's important to default the slug so that it doesn't return \"undefined\"\n    const { slug = \"\" } = context.query\n    return await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, { slug })\n  }\n\nexport default Post"]},"metadata":{},"sourceType":"module"}