{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/posts/[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport HeaderLayout from '../../components/HeaderLayout';\nimport themes from '../../colorsAndThemes';\nvar MainContent = styled.div.withConfig({\n  displayName: \"slug__MainContent\",\n  componentId: \"tg0oky-0\"\n})([\"margin-top:1.5em;font-size:1.15em;line-height:1.75em;\"]);\nvar PDesc = styled.p.withConfig({\n  displayName: \"slug__PDesc\",\n  componentId: \"tg0oky-1\"\n})([\"font-size:1.1em;color:\", \";margin:3px 0 0;\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.primaryColor;\n});\nvar PDate = styled(PDesc).withConfig({\n  displayName: \"slug__PDate\",\n  componentId: \"tg0oky-2\"\n})([\"font-size:1em;color:\", \";\"], function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.text;\n});\nvar PBlock = styled.p.withConfig({\n  displayName: \"slug__PBlock\",\n  componentId: \"tg0oky-3\"\n})([\"margin-bottom:1em;\"]);\nvar AsideBlock = styled.div.withConfig({\n  displayName: \"slug__AsideBlock\",\n  componentId: \"tg0oky-4\"\n})([\"margin-bottom:1em;padding:1em 2em;background-color:\", \";font-size:.9em;border-left:1px solid rgba(114,143,203,.5);\"], function (_ref3) {\n  var theme = _ref3.theme;\n  return theme.asideBackground;\n});\nvar Pre = styled.pre.withConfig({\n  displayName: \"slug__Pre\",\n  componentId: \"tg0oky-5\"\n})([\"font-family:'Nanum Gothic Coding',monospace;font-size:.9em;overflow:auto;text-align:left;margin:1em 0;padding:0.5em;& .token-line{line-height:1.4em;height:1.3em;}\"]);\nvar LineNo = styled.span.withConfig({\n  displayName: \"slug__LineNo\",\n  componentId: \"tg0oky-6\"\n})([\"display:inline-block;width:2em;user-select:none;opacity:0.3;\"]);\n\nfunction Post(props) {\n  console.log('propsPost: ', props);\n  var postContent = [];\n\n  function paragraphBlock(section) {\n    if (section.children.length > 0) {\n      var subSections = [];\n\n      for (var i = 0; i < section.children.length; i++) {\n        if (section.children[i].marks.length > 0) {\n          for (var j = 0; j < section.markDefs.length; j++) {\n            if (section.markDefs[j]._key === section.children[i].marks[0]) {\n              subSections.push(__jsx(\"a\", {\n                href: \"\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 33\n                }\n              }));\n            }\n          }\n        }\n      }\n    } // function paragraphBlock(content, _key) {\n    //     return <PBlock key={_key}>{content}</PBlock>\n\n  }\n\n  function asideStringNewlines(content, _key) {\n    var contentArray = content.split('\\n'); // console.log('contentArray: ', contentArray)\n\n    var renderedLines = [];\n\n    for (var i = 0; i < contentArray.length; i++) {\n      renderedLines.push(__jsx(\"div\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 32\n        }\n      }, contentArray[i]));\n    }\n\n    return __jsx(AsideBlock, {\n      key: _key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 16\n      }\n    }, renderedLines);\n  }\n\n  function prismafyCodeBlock(content, _key) {\n    var _this = this;\n\n    return __jsx(Highlight, _extends({}, defaultProps, {\n      theme: props.themeString === 'light' ? themes.light.syntax : themes.dark.syntax,\n      code: content,\n      language: \"jsx\",\n      key: _key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }), function (_ref4) {\n      var className = _ref4.className,\n          style = _ref4.style,\n          tokens = _ref4.tokens,\n          getLineProps = _ref4.getLineProps,\n          getTokenProps = _ref4.getTokenProps;\n      return __jsx(Pre, {\n        className: className,\n        style: style,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, tokens.map(function (line, i) {\n        return __jsx(\"div\", _extends({}, getLineProps({\n          line: line,\n          key: i\n        }), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }\n        }), __jsx(LineNo, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }\n        }, i + 1), line.map(function (token, key) {\n          return __jsx(\"span\", _extends({}, getTokenProps({\n            token: token,\n            key: key\n          }), {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 41\n            }\n          }));\n        }));\n      }));\n    });\n  }\n\n  props.body && props.body.forEach(function (section) {\n    // TODO: change to switch:\n    // if (section._type === 'block') {\n    //     postContent.push(\n    //         paragraphBlock(\n    //             section.children[0].text, section._key\n    //         )\n    //     )\n    // } \n    if (section._type === 'block') {\n      for (var i = 0; i < section.children.length; i++) {\n        postContent.push(paragraphBlock(section) // paragraphBlock(\n        //     section.children[i].text, section.children[i]._key\n        // )\n        );\n      }\n    } else if (section._type === 'code') {\n      postContent.push(prismafyCodeBlock(section.code, section._key));\n    } else if (section._type === 'post_aside') {\n      postContent.push(asideStringNewlines(section.str_content_newline, section._key));\n    }\n  });\n  return __jsx(HeaderLayout, {\n    onToggleThemeClick: props.onToggleThemeClick,\n    themeString: props.themeString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, props.title), __jsx(PDesc, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, props.description), __jsx(PDate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, moment.utc(props._createdAt).format(\"LL\")), __jsx(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, postContent.map(function (content) {\n    return content;\n  }))));\n}\n\n// Post.getInitialProps = async function(context) {\n//     // default the slug so that it doesn't return \"undefined\"\n//     // console.log('context: ', context)\n//     const { slug = \"\" } = context.query\n//     const data = await client.fetch(`\n//         *[_type == \"post\" && slug.current == $slug][0]\n//     `, { slug })\n//     return data\n// }\nexport var __N_SSG = true;\nexport default Post;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/posts/[slug].js"],"names":["styled","moment","Highlight","defaultProps","HeaderLayout","themes","MainContent","div","PDesc","p","theme","primaryColor","PDate","text","PBlock","AsideBlock","asideBackground","Pre","pre","LineNo","span","Post","props","console","log","postContent","paragraphBlock","section","children","length","subSections","i","marks","j","markDefs","_key","push","asideStringNewlines","content","contentArray","split","renderedLines","prismafyCodeBlock","themeString","light","syntax","dark","className","style","tokens","getLineProps","getTokenProps","map","line","key","token","body","forEach","_type","code","str_content_newline","onToggleThemeClick","title","description","utc","_createdAt","format"],"mappings":"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","sourcesContent":["import client from '../../client'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport HeaderLayout from '../../components/HeaderLayout'\nimport themes from '../../colorsAndThemes'\n\nconst MainContent = styled.div`\n    margin-top: 1.5em;\n    font-size: 1.15em;\n    line-height: 1.75em;\n`\nconst PDesc = styled.p`\n    font-size: 1.1em;\n    color: ${({ theme }) => theme.primaryColor};\n    margin: 3px 0 0;\n`\nconst PDate = styled(PDesc)`\n    font-size: 1em;\n    color: ${({ theme }) => theme.text};\n`\nconst PBlock = styled.p`\n    margin-bottom: 1em;\n`\nconst AsideBlock = styled.div`\n    margin-bottom: 1em;\n    padding: 1em 2em;\n    background-color: ${({ theme }) => theme.asideBackground};\n    font-size: .9em;\n    /* TODO: dynamically change border and text according to theme? */\n    /* light text: rgb(178, 151, 98) */\n    /* light border: */\n    /* border-left: 1px solid var(--primary-color); */\n    border-left: 1px solid rgba(114, 143, 203, .5);\n`\nconst Pre = styled.pre`\n    font-family: 'Nanum Gothic Coding', monospace;\n    font-size: .9em;\n    overflow: auto;\n    text-align: left;\n    margin: 1em 0;\n    padding: 0.5em;\n    & .token-line {\n        line-height: 1.4em;\n        height: 1.3em;\n    }\n    /* box-shadow: 0px 6px 7px -4px; */\n`\nconst LineNo = styled.span`\n    display: inline-block;\n    width: 2em;\n    user-select: none;\n    opacity: 0.3;\n`\n\nfunction Post(props) {\n    console.log('propsPost: ', props)\n    const postContent = []\n\n    function paragraphBlock(section) {\n        if (section.children.length > 0) {\n            const subSections = []\n            for (let i = 0; i < section.children.length; i++) {\n                if (section.children[i].marks.length > 0) {\n                    for (let j = 0; j < section.markDefs.length; j++) {\n                        if (section.markDefs[j]._key === section.children[i].marks[0]) {\n                                subSections.push(\n                                <a href=\"\">{}</a>\n                                )\n                        }\n                    }\n                }\n            }\n        }\n    // function paragraphBlock(content, _key) {\n    //     return <PBlock key={_key}>{content}</PBlock>\n    }\n\n    function asideStringNewlines(content, _key) {\n        const contentArray = content.split('\\n')\n        // console.log('contentArray: ', contentArray)\n        const renderedLines = []\n        for (let i = 0; i < contentArray.length; i++) {\n            renderedLines.push(<div key={i}>{contentArray[i]}</div>)\n        }\n        return <AsideBlock key={_key}>{renderedLines}</AsideBlock>\n    }\n    \n    function prismafyCodeBlock(content, _key) {\n        return (\n            <Highlight \n                {...defaultProps} \n                theme={\n                    props.themeString === 'light'\n                        ? themes.light.syntax\n                        : themes.dark.syntax\n                } \n                code={content} \n                language=\"jsx\"\n                key={_key}\n            >\n                {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                    <Pre className={className} style={style}>\n                        {tokens.map((line, i) => (\n                            <div {...getLineProps({ line, key: i })}>\n                                <LineNo>{i + 1}</LineNo>\n                                {line.map((token, key) => {\n                                    return (\n                                        <span {...getTokenProps({ token, key })} />\n                                    )\n                                })}\n                            </div>\n                        ))}\n                    </Pre>\n                )}\n            </Highlight>\n        )\n    }\n\n    props.body && props.body.forEach(section => {\n        // TODO: change to switch:\n        // if (section._type === 'block') {\n        //     postContent.push(\n        //         paragraphBlock(\n        //             section.children[0].text, section._key\n        //         )\n        //     )\n        // } \n        if (section._type === 'block') {\n            for (let i = 0; i < section.children.length; i++) {\n                postContent.push(\n                    paragraphBlock(section)\n                    // paragraphBlock(\n                    //     section.children[i].text, section.children[i]._key\n                    // )\n                )\n            }\n        }\n        else if (section._type === 'code') {\n            postContent.push(\n                prismafyCodeBlock(section.code, section._key)\n            )\n        } \n        else if (section._type === 'post_aside') {\n            postContent.push(\n                asideStringNewlines(\n                    section.str_content_newline, section._key\n                )\n            )\n        }\n    })\n\n    return (\n        <HeaderLayout \n            onToggleThemeClick={props.onToggleThemeClick}\n            themeString={props.themeString}\n        >\n            <article>\n                <h2>{props.title}</h2>\n                <PDesc>{props.description}</PDesc>\n                {/* // TODO: Add _updatedAt field? */}\n                <PDate>{moment.utc(props._createdAt).format(\"LL\")}</PDate>\n                <MainContent>\n                    {postContent.map(content => content)}\n                </MainContent>\n            </article>\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticPaths() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n    // Get the paths we want to pre-render based on posts\n    const paths = posts.map(post => ({\n        params: { slug: post.slug.current },\n    }))\n    // Pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n  \nexport async function getStaticProps(context) {\n    const { slug } = context.params\n    const post = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, { slug } )\n    return { props: post }\n}\n  \n// Post.getInitialProps = async function(context) {\n//     // default the slug so that it doesn't return \"undefined\"\n//     // console.log('context: ', context)\n//     const { slug = \"\" } = context.query\n//     const data = await client.fetch(`\n//         *[_type == \"post\" && slug.current == $slug][0]\n//     `, { slug })\n//     return data\n// }\n\nexport default Post"]},"metadata":{},"sourceType":"module"}