{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(250,223,147);\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.75em;\"]);\n\nfunction Index(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts,\n      tags = _ref.tags;\n  console.log('posts: ', posts);\n  console.log('tags: ', tags);\n\n  var _useState = useState(posts),\n      allPosts = _useState[0],\n      setAllPosts = _useState[1];\n\n  var _useState2 = useState(posts),\n      filteredPosts = _useState2[0],\n      setFilteredPosts = _useState2[1]; // const [ allTags, setAllTags ] = useState(tags)\n\n\n  var _useState3 = useState([]),\n      tagCounts = _useState3[0],\n      setTagCounts = _useState3[1];\n\n  var _useState4 = useState([]),\n      filteredKeywords = _useState4[0],\n      setFilteredKeywords = _useState4[1];\n\n  console.log('tagCounts: ', tagCounts);\n  useEffect(function () {\n    var tagCounts = [];\n    tags.forEach(function _callee(tag) {\n      var count, tagCount;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(client.fetch(\"\\n                count(*[ _type == \\\"post\\\" && $tagID in tags[]._ref ])\\n            \", {\n                tagID: tag._id\n              }));\n\n            case 2:\n              count = _context.sent;\n              tagCount = {\n                _id: tag._id,\n                name: tag.name,\n                count: count\n              }; // console.log('tagCount: ', tagCount)\n              // setTagCounts(state => [...state, tagCount])\n\n              tagCounts.push(tagCount);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n    setTagCounts(tagCounts);\n  }, []);\n\n  function setTagCountsState(tagCount) {\n    setTagCounts(function (state) {\n      return [].concat(_toConsumableArray(state), [tagCount]);\n    });\n  }\n\n  function getFilteredPosts() {\n    var posts;\n    return _regeneratorRuntime.async(function getFilteredPosts$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(client.fetch(\"\\n            *[ _type == \\\"post\\\" && $tagID in tags[]._ref ]\\n        \", {}));\n\n          case 2:\n            posts = _context2.sent;\n            console.log('posts: ', posts);\n            setFilteredPosts(posts);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handleTagFilter(e) {\n    var selectedKeyword = e.target.firstChild.data; // console.log('selectedKeyword: ', selectedKeyword)\n\n    if (!filteredKeywords.includes(selectedKeyword)) {\n      setFilteredKeywords([].concat(_toConsumableArray(filteredKeywords), [selectedKeyword]));\n    } else {\n      setFilteredKeywords(filteredKeywords.filter(function (keyword) {\n        return keyword !== selectedKeyword;\n      }));\n    }\n\n    console.log('filteredKeywords: ', filteredKeywords);\n    getFilteredPosts();\n  }\n\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: allPosts,\n    handleTagFilter: handleTagFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), filteredPosts.map(function (_ref2) {\n    var _id = _ref2._id,\n        _createdAt = _ref2._createdAt,\n        description = _ref2.description,\n        slug = _ref2.slug,\n        title = _ref2.title;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    }, title)), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")));\n  }));\n}\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","DateP","p","Index","posts","tags","console","log","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredKeywords","setFilteredKeywords","forEach","tag","fetch","tagID","_id","count","tagCount","name","push","setTagCountsState","state","getFilteredPosts","handleTagFilter","e","selectedKeyword","target","firstChild","data","includes","filter","keyword","map","_createdAt","description","slug","title","current","utc","format"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts, tags }) {\n    \n    console.log('posts: ', posts)\n    console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState(posts)\n    // const [ allTags, setAllTags ] = useState(tags)\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredKeywords, setFilteredKeywords ] = useState([])\n    console.log('tagCounts: ', tagCounts)\n    \n    useEffect(() => {\n        const tagCounts = []\n        tags.forEach(async (tag) => {\n            const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, { tagID: tag._id })\n            const tagCount = {\n                _id: tag._id,\n                name: tag.name,\n                count\n            }\n            // console.log('tagCount: ', tagCount)\n            // setTagCounts(state => [...state, tagCount])\n            tagCounts.push(tagCount)\n            \n        })\n        setTagCounts(tagCounts)\n    }, [])\n    \n    function setTagCountsState(tagCount) {\nsetTagCounts(state => [...state, tagCount])\n    }\n\n    async function getFilteredPosts() {\n        const posts = await client.fetch(`\n            *[ _type == \"post\" && $tagID in tags[]._ref ]\n        `, { })\n        console.log('posts: ', posts)\n        setFilteredPosts(posts)\n    }\n\n    function handleTagFilter(e) {\n        const selectedKeyword = e.target.firstChild.data\n        // console.log('selectedKeyword: ', selectedKeyword)\n        if (!filteredKeywords.includes(selectedKeyword)) {\n            setFilteredKeywords([...filteredKeywords, selectedKeyword])\n        } else {\n            setFilteredKeywords(filteredKeywords.filter(keyword => {\n               return keyword !== selectedKeyword\n            }))\n        }\n        console.log('filteredKeywords: ', filteredKeywords)\n        getFilteredPosts()\n    }\n\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={allPosts}\n                handleTagFilter={handleTagFilter}\n            />\n\n            <h2>Posts:</h2>\n            {filteredPosts.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ]{\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}