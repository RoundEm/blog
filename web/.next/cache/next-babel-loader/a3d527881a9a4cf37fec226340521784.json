{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(250,223,147);\"]);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.75em;\"]);\n\nfunction Index({\n  posts\n}) {\n  const {\n    0: filteredKeywords,\n    1: setFilteredKeywords\n  } = useState([]);\n  const {\n    0: filteredPosts,\n    1: setFilteredPosts\n  } = useState([]);\n\n  async function getFilteredPosts() {\n    const posts = await client.fetch(`\n            *[ _type == \"post\" && ]{\n                ..., \n                tags[]->{_id, name}\n            }\n        `);\n    console.log('posts: ', posts);\n    setFilteredPosts(posts);\n  }\n\n  function handleTagFilter(e) {\n    const selectedKeyword = e.target.firstChild.data; // console.log('selectedKeyword: ', selectedKeyword)\n\n    if (!filteredKeywords.includes(selectedKeyword)) {\n      setFilteredKeywords([...filteredKeywords, selectedKeyword]);\n    } else {\n      setFilteredKeywords(filteredKeywords.filter(keyword => keyword !== selectedKeyword));\n    }\n\n    console.log('filteredKeywords: ', filteredKeywords);\n    getFilteredPosts();\n  } // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n\n\n  const tags = posts.reduce((tagCount, post) => {\n    // TODO: is this check necessary or will there always be tags even when empty array?\n    post.tags && post.tags.forEach(tag => {\n      if (!tagCount[tag.name]) {\n        tagCount[tag.name] = 1;\n      } else {\n        tagCount[tag.name] = tagCount[tag.name] + 1;\n      }\n    });\n    return tagCount;\n  }, {});\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tags,\n    handleTagFilter: handleTagFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), posts.map(({\n    _id,\n    _createdAt,\n    description,\n    slug,\n    title\n  }) => __jsx(ListItem, {\n    key: _id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: \"/post/[slug]\",\n    as: `/post/${slug.current}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }\n  }, title)), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, description), __jsx(DateP, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, moment.utc(_createdAt).format(\"LL\")))));\n}\n\nexport async function getStaticProps() {\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  return {\n    props: {\n      posts\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","styled","moment","HeaderLayout","KeywordTags","ListItem","li","DateP","p","Index","posts","filteredKeywords","setFilteredKeywords","filteredPosts","setFilteredPosts","getFilteredPosts","fetch","console","log","handleTagFilter","e","selectedKeyword","target","firstChild","data","includes","filter","keyword","tags","reduce","tagCount","post","forEach","tag","name","map","_id","_createdAt","description","slug","title","current","utc","format","getStaticProps","props"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts }) {\n    const [ filteredKeywords, setFilteredKeywords ] = useState([])\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n\n    async function getFilteredPosts() {\n        const posts = await client.fetch(`\n            *[ _type == \"post\" && ]{\n                ..., \n                tags[]->{_id, name}\n            }\n        `)\n        console.log('posts: ', posts)\n        setFilteredPosts(posts)\n    }\n\n    function handleTagFilter(e) {\n        const selectedKeyword = e.target.firstChild.data\n        // console.log('selectedKeyword: ', selectedKeyword)\n        if (!filteredKeywords.includes(selectedKeyword)) {\n            setFilteredKeywords([...filteredKeywords, selectedKeyword])\n        } else {\n            setFilteredKeywords(filteredKeywords.filter(keyword => keyword !== selectedKeyword))\n        }\n        console.log('filteredKeywords: ', filteredKeywords)\n        getFilteredPosts()\n    }\n    // TODO: there's gotta be a more straightforward way to get these counts, right? Maybe just do it from query?\n    const tags = posts.reduce((tagCount, post) => {\n        // TODO: is this check necessary or will there always be tags even when empty array?\n        post.tags && post.tags.forEach(tag => {\n            if (!tagCount[tag.name]) {\n                tagCount[tag.name] = 1\n            } else {\n                tagCount[tag.name] = tagCount[tag.name] + 1\n            }\n        })\n        return tagCount\n    }, {})\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tags}\n                handleTagFilter={handleTagFilter}\n            />\n\n            <h2>Posts:</h2>\n            {posts.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    return { props: { posts } }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}