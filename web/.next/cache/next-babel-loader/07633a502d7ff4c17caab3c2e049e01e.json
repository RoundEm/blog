{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/posts/[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport client from '../../client';\nimport HeaderLayout from '../../components/HeaderLayout';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Prism from 'prismjs/components/prism-core';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport themes from '../../colorsAndThemes';\nconst MainContent = styled.div.withConfig({\n  displayName: \"slug__MainContent\",\n  componentId: \"tg0oky-0\"\n})([\"margin-top:1.5em;font-size:1.15em;line-height:1.75em;\"]);\nconst PDesc = styled.p.withConfig({\n  displayName: \"slug__PDesc\",\n  componentId: \"tg0oky-1\"\n})([\"font-size:1.1em;color:\", \";margin:3px 0 0;\"], ({\n  theme\n}) => theme.primaryColor);\nconst PDate = styled(PDesc).withConfig({\n  displayName: \"slug__PDate\",\n  componentId: \"tg0oky-2\"\n})([\"font-size:1em;color:\", \";\"], ({\n  theme\n}) => theme.text);\nconst PBlock = styled.p.withConfig({\n  displayName: \"slug__PBlock\",\n  componentId: \"tg0oky-3\"\n})([\"margin-bottom:1em;\"]);\nconst AsideBlock = styled.div.withConfig({\n  displayName: \"slug__AsideBlock\",\n  componentId: \"tg0oky-4\"\n})([\"margin-bottom:1em;padding:1em 2em;background-color:\", \";font-size:.9em;border-left:1px solid rgba(114,143,203,.5);\"], ({\n  theme\n}) => theme.asideBackground); // TODO: fix overflow and add horizontal scroll\n\nconst Pre = styled.pre.withConfig({\n  displayName: \"slug__Pre\",\n  componentId: \"tg0oky-5\"\n})([\"font-family:'Nanum Gothic Coding',monospace;font-size:.9em;overflow:auto;text-align:left;margin:1em 0;padding:0.5em;& .token-line{line-height:1.3em;height:1.3em;}\"]);\nconst LineNo = styled.span.withConfig({\n  displayName: \"slug__LineNo\",\n  componentId: \"tg0oky-6\"\n})([\"display:inline-block;width:2em;user-select:none;opacity:0.3;\"]);\n\nfunction Post(props) {\n  console.log('propsPost: ', props);\n  const postContent = [];\n\n  function paragraphBlock(content, key) {\n    return __jsx(PBlock, {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 16\n      }\n    }, content);\n  }\n\n  function asideStringNewlines(content, key) {\n    const contentArray = content.split('\\n'); // console.log('contentArray: ', contentArray)\n\n    const renderedLines = [];\n\n    for (const line of contentArray) {\n      renderedLines.push(__jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 32\n        }\n      }, line));\n    }\n\n    return __jsx(AsideBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 16\n      }\n    }, renderedLines);\n  }\n\n  function prismafyCodeBlock(content, _key) {\n    return __jsx(Highlight, _extends({}, defaultProps, {\n      theme: props.themeString === 'light' ? themes.light.syntax : themes.dark.syntax,\n      code: content,\n      language: \"jsx\",\n      key: _key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }), ({\n      className,\n      style,\n      tokens,\n      getLineProps,\n      getTokenProps\n    }) => __jsx(Pre, {\n      className: className,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, tokens.map((line, i) => __jsx(\"div\", _extends({}, getLineProps({\n      line,\n      key: i\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }), __jsx(LineNo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 33\n      }\n    }, i + 1), line.map((token, key) => {\n      return __jsx(\"span\", _extends({}, getTokenProps({\n        token,\n        key\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 41\n        }\n      }));\n    })))));\n  }\n\n  props.body && props.body.forEach(section => {\n    // TODO: change to switch:\n    if (section._type === 'block') {\n      postContent.push(paragraphBlock(section.children[0].text, section._key));\n    } else if (section._type === 'code') {\n      postContent.push(prismafyCodeBlock(section.code, section._key));\n    } else if (section._type === 'post_aside') {\n      postContent.push(asideStringNewlines(section.string_content, section._key));\n    }\n  });\n  return __jsx(HeaderLayout, {\n    onToggleThemeClick: props.onToggleThemeClick,\n    themeString: props.themeString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, props.title), __jsx(PDesc, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, props.description), __jsx(PDate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, moment.utc(props._createdAt).format(\"LL\")), __jsx(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, postContent.map(content => content))));\n}\n\nexport async function getStaticPaths() {\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => ({\n    params: {\n      slug: post.slug.current\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  const {\n    slug\n  } = context.params;\n  const post = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, {\n    slug\n  });\n  return {\n    props: post\n  };\n} // Post.getInitialProps = async function(context) {\n//     // default the slug so that it doesn't return \"undefined\"\n//     // console.log('context: ', context)\n//     const { slug = \"\" } = context.query\n//     const data = await client.fetch(`\n//         *[_type == \"post\" && slug.current == $slug][0]\n//     `, { slug })\n//     return data\n// }\n\nexport default Post;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/posts/[slug].js"],"names":["client","HeaderLayout","styled","moment","Prism","Highlight","defaultProps","themes","MainContent","div","PDesc","p","theme","primaryColor","PDate","text","PBlock","AsideBlock","asideBackground","Pre","pre","LineNo","span","Post","props","console","log","postContent","paragraphBlock","content","key","asideStringNewlines","contentArray","split","renderedLines","line","push","prismafyCodeBlock","_key","themeString","light","syntax","dark","className","style","tokens","getLineProps","getTokenProps","map","i","token","body","forEach","section","_type","children","code","string_content","onToggleThemeClick","title","description","utc","_createdAt","format","getStaticPaths","posts","fetch","paths","post","params","slug","current","fallback","getStaticProps","context"],"mappings":"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","sourcesContent":["import client from '../../client'\nimport HeaderLayout from '../../components/HeaderLayout'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport Prism from 'prismjs/components/prism-core'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport themes from '../../colorsAndThemes'\n\nconst MainContent = styled.div`\n    margin-top: 1.5em;\n    font-size: 1.15em;\n    line-height: 1.75em;\n`\nconst PDesc = styled.p`\n    font-size: 1.1em;\n    color: ${({ theme }) => theme.primaryColor};\n    margin: 3px 0 0;\n`\nconst PDate = styled(PDesc)`\n    font-size: 1em;\n    color: ${({ theme }) => theme.text};\n`\nconst PBlock = styled.p`\n    margin-bottom: 1em;\n`\nconst AsideBlock = styled.div`\n    margin-bottom: 1em;\n    padding: 1em 2em;\n    background-color: ${({ theme }) => theme.asideBackground};\n    font-size: .9em;\n    /* TODO: dynamically change border and text according to theme? */\n    /* light text: rgb(178, 151, 98) */\n    /* light border: */\n    /* border-left: 1px solid var(--primary-color); */\n    border-left: 1px solid rgba(114, 143, 203, .5);\n`\n// TODO: fix overflow and add horizontal scroll\nconst Pre = styled.pre`\n    /* font-family: 'Courier Prime', monospace;\n    font-family: 'Cutive Mono', monospace; */\n    font-family: 'Nanum Gothic Coding', monospace;\n    font-size: .9em;\n    overflow: auto;\n    text-align: left;\n    margin: 1em 0;\n    padding: 0.5em;\n    & .token-line {\n        line-height: 1.3em;\n        height: 1.3em;\n    }\n    /* box-shadow: 0px 6px 7px -4px; */\n`\nconst LineNo = styled.span`\n    display: inline-block;\n    width: 2em;\n    user-select: none;\n    opacity: 0.3;\n`\n\nfunction Post(props) {\n    console.log('propsPost: ', props)\n    const postContent = []\n\n    function paragraphBlock(content, key) {\n        return <PBlock key={key}>{content}</PBlock>\n    }\n\n    function asideStringNewlines(content, key) {\n        const contentArray = content.split('\\n')\n        // console.log('contentArray: ', contentArray)\n        const renderedLines = []\n        for (const line of contentArray) {\n            renderedLines.push(<div>{line}</div>)\n        }\n        return <AsideBlock>{renderedLines}</AsideBlock>\n    }\n    \n    function prismafyCodeBlock(content, _key) {\n        return (\n            <Highlight \n                {...defaultProps} \n                theme={\n                    props.themeString === 'light'\n                        ? themes.light.syntax\n                        : themes.dark.syntax\n                } \n                code={content} \n                language=\"jsx\"\n                key={_key}\n            >\n                {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                    <Pre className={className} style={style}>\n                        {tokens.map((line, i) => (\n                            <div {...getLineProps({ line, key: i })}>\n                                <LineNo>{i + 1}</LineNo>\n                                {line.map((token, key) => {\n                                    return (\n                                        <span {...getTokenProps({ token, key })} />\n                                    )\n                                })}\n                            </div>\n                        ))}\n                    </Pre>\n                )}\n            </Highlight>\n        )\n    }\n\n    props.body && props.body.forEach(section => {\n        // TODO: change to switch:\n        if (section._type === 'block') {\n            postContent.push(\n                paragraphBlock(\n                    section.children[0].text, section._key\n                )\n            )\n        } else if (section._type === 'code') {\n            postContent.push(\n                prismafyCodeBlock(section.code, section._key)\n            )\n        } else if (section._type === 'post_aside') {\n            postContent.push(\n                asideStringNewlines(\n                    section.string_content, section._key\n                )\n            )\n        }\n    })\n\n    return (\n        <HeaderLayout \n            onToggleThemeClick={props.onToggleThemeClick}\n            themeString={props.themeString}\n        >\n            <article>\n                <h2>{props.title}</h2>\n                <PDesc>{props.description}</PDesc>\n                {/* // TODO: Add _updatedAt field? */}\n                <PDate>{moment.utc(props._createdAt).format(\"LL\")}</PDate>\n                <MainContent>\n                    {postContent.map(content => content)}\n                </MainContent>\n            </article>\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticPaths() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n    // Get the paths we want to pre-render based on posts\n    const paths = posts.map(post => ({\n        params: { slug: post.slug.current },\n    }))\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n  \nexport async function getStaticProps(context) {\n    const { slug } = context.params\n    const post = await client.fetch(`\n        *[_type == \"post\" && slug.current == $slug][0]\n    `, { slug } )\n    return { props: post }\n}\n  \n// Post.getInitialProps = async function(context) {\n//     // default the slug so that it doesn't return \"undefined\"\n//     // console.log('context: ', context)\n//     const { slug = \"\" } = context.query\n//     const data = await client.fetch(`\n//         *[_type == \"post\" && slug.current == $slug][0]\n//     `, { slug })\n//     return data\n// }\n\nexport default Post"]},"metadata":{},"sourceType":"module"}