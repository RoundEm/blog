{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport sortObjProperties from '../utils/sortObjProperties.js';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid var(--primary-darker);\"]);\nconst ListItemLink = styled.a.withConfig({\n  displayName: \"pages__ListItemLink\",\n  componentId: \"nuslkc-1\"\n})([\"font-family:'Fjalla One',sans-serif;font-weight:400;&:hover{cursor:pointer;color:\", \";}\"], ({\n  theme\n}) => theme.primaryColor);\nconst TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-2\"\n})([\"display:inline-block;margin-right:5px;padding:3px 5px;font-family:'Nanum Gothic Coding',monospace;font-size:.5em;color:\", \";background:\", \";\"], ({\n  theme\n}) => theme.secondaryColor, ({\n  theme\n}) => theme.primaryColor);\nconst DescP = styled.p.withConfig({\n  displayName: \"pages__DescP\",\n  componentId: \"nuslkc-3\"\n})([\"font-size:.6em;color:\", \";\"], ({\n  theme\n}) => theme.primaryColor);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-4\"\n})([\"font-size:.5em;\"]); // removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using `new Set`, then parsing the final unique array of posts back to a normal array of objects\n\nfunction uniquePostsArray(posts) {\n  return [...new Set(posts.map(postObj => {\n    return JSON.stringify(postObj);\n  }))].map(postStr => {\n    return JSON.parse(postStr);\n  });\n}\n\nfunction getTagCountsData(tags) {\n  return Promise.all(tags.map(async tag => {\n    return await client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"count\": count(\n                        *[ \n                            _type == \"post\" && \n                            $tagID in tags[]._ref \n                        ]\n                    )\n                }[0]\n            `, {\n      tagID: tag._id\n    });\n  }));\n}\n\nfunction Index({\n  posts,\n  tags,\n  themeString,\n  onToggleThemeClick\n}) {\n  console.log('posts: ', posts); // console.log('tags: ', tags)\n\n  const {\n    0: allPosts\n  } = useState(posts);\n  const {\n    0: filteredPosts,\n    1: setFilteredPosts\n  } = useState([]);\n  const {\n    0: tagCounts,\n    1: setTagCounts\n  } = useState([]);\n  const {\n    0: filteredTags,\n    1: setFilteredTags\n  } = useState([]); // console.log('tagCounts: ', tagCounts)\n\n  useEffect(() => {\n    getTagCountsData(tags).then(tagCounts => {\n      setTagCounts(tagCounts);\n    }).catch(err => console.log('error getting tag counts: ', err));\n  }, []);\n  useEffect(() => {\n    if (filteredTags.length > 0) {\n      const _filteredPosts = [];\n      allPosts.forEach(post => {\n        post.tags.forEach(tag => {\n          if (filteredTags.includes(tag._id)) {\n            _filteredPosts.push(post);\n          }\n        });\n      });\n      setFilteredPosts(uniquePostsArray(_filteredPosts));\n    } else {\n      setFilteredPosts([]);\n    }\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    const selectedTagID = e.currentTarget.id;\n\n    if (selectedTagID === 'clearFilter') {\n      setFilteredTags([]);\n    } else if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(state => [...state, selectedTagID]);\n    } else {\n      setFilteredTags(filteredTags.filter(tag => {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  const postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return (// TODO: is there a better way to render HeaderLayout instead of using in here and in [slug] (and any other separate pages that I add? Checkout next.js _document)\n    __jsx(HeaderLayout, {\n      onToggleThemeClick: onToggleThemeClick,\n      themeString: themeString\n    }, __jsx(\"h2\", null, \"Filter by Tags:\"), __jsx(KeywordTags, {\n      tags: tagCounts,\n      handleTagFilter: handleTagFilter,\n      filteredTags: filteredTags\n    }), __jsx(\"h2\", null, \"Posts:\"), postsToRender.map(({\n      _id,\n      _createdAt,\n      manual_pub_date,\n      description,\n      slug,\n      title,\n      tags\n    }) => __jsx(ListItem, {\n      key: _id\n    }, __jsx(Link, {\n      href: \"/posts/[slug]\",\n      as: `/posts/${slug.current}`\n    }, __jsx(ListItemLink, null, title)), __jsx(DescP, null, description), __jsx(DateP, null, manual_pub_date ? moment.utc(manual_pub_date).format(\"LL\") : moment.utc(_createdAt).format(\"LL\")), __jsx(\"ul\", null, sortObjProperties(tags).map(tag => {\n      return __jsx(TagListItem, {\n        key: tag._id\n      }, tag.name);\n    })))))\n  );\n}\n\nexport async function getStaticProps() {\n  const posts = await client.fetch(`\n        *[ _type == \"post\" && published ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `);\n  return {\n    props: {\n      posts,\n      tags\n    }\n  };\n}\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}