{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/components/KeywordTags.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport '../globalStyles.css';\nconst TagBtn = styled.button.withConfig({\n  displayName: \"KeywordTags__TagBtn\",\n  componentId: \"sc-1eepvlk-0\"\n})([\"padding:10px 15px;margin:15px 0 0 15px;color:var(--secondary-color);font-size:1.2em;border:none;background-color:var(--primary-color);font-family:'Lustria',serif;&:hover{cursor:pointer;}\"]);\n\nfunction getTagCountsData(tags) {\n  return Promise.all(tags.map(tag => {\n    return client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"tagCount\": count(\n                        *[ _type == \"post\" && $tagID in tags[]._ref ]\n                    )\n                }[0]\n            `, {\n      tagID: tag._id\n    });\n  }));\n}\n\nfunction KeywordTags(props) {\n  const {\n    0: tagCounts,\n    1: setTagCounts\n  } = useState([]);\n  console.log('props: ', props);\n  useEffect(() => {\n    getTagCountsData(props.tags).then(tagCounts => {\n      setTagCounts(tagCounts);\n    }).catch(err => console.log('error getting tag counts: ', err)); // tags.forEach(async tag => {\n    //     const count = await client.fetch(`\n    //         count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n    //     `, { tagID: tag._id })\n    //     // this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n    //     if (count > 0) {\n    //         const tagCount = {\n    //             _id: tag._id,\n    //             name: tag.name,\n    //             count\n    //         }\n    //         // TODO: what's a good way to set these all these at once??\n    //         setTagCounts(state => [...state, tagCount])\n    //     }\n    // })\n  }, []);\n  tagCounts.sort((a, b) => {\n    return a.name > b.name ? 1 : -1;\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(TagBtn, {\n    onClick: props.handleTagFilter,\n    id: \"clearFilter\",\n    className: props.filteredTags.length > 0 ? '' : 'selectedTag',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"All Posts\"), tagCounts.map(tag => // console.log('tagtag: ', tag)\n  tag.count > 0 && __jsx(TagBtn, {\n    key: tag.name,\n    id: tag._id,\n    onClick: props.handleTagFilter,\n    className: props.filteredTags.includes(tag._id) ? 'selectedTag' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, tag.name, \"\\xA0 (\", tag.tagCount, \")\"))); // return null\n}\n\nexport default KeywordTags;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/components/KeywordTags.js"],"names":["useState","useEffect","styled","TagBtn","button","getTagCountsData","tags","Promise","all","map","tag","client","fetch","tagID","_id","KeywordTags","props","tagCounts","setTagCounts","console","log","then","catch","err","sort","a","b","name","handleTagFilter","filteredTags","length","count","includes","tagCount"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,qBAAP;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,MAAV;AAAA;AAAA;AAAA,kMAAZ;;AAYA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,SAAOC,OAAO,CAACC,GAAR,CACHF,IAAI,CAACG,GAAL,CAASC,GAAG,IAAI;AACZ,WAAOC,MAAM,CAACC,KAAP,CAAc;;;;;;;;aAAd,EAQJ;AAAEC,MAAAA,KAAK,EAAEH,GAAG,CAACI;AAAb,KARI,CAAP;AASH,GAVD,CADG,CAAP;AAaH;;AAED,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB,QAAM;AAAA,OAAEC,SAAF;AAAA,OAAaC;AAAb,MAA8BlB,QAAQ,CAAC,EAAD,CAA5C;AACAmB,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,KAAvB;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,gBAAgB,CAACW,KAAK,CAACV,IAAP,CAAhB,CACKe,IADL,CACUJ,SAAS,IAAI;AACfC,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACH,KAHL,EAIKK,KAJL,CAIWC,GAAG,IAAIJ,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CG,GAA1C,CAJlB,EADY,CAMZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GArBQ,EAqBN,EArBM,CAAT;AAuBAN,EAAAA,SAAS,CAACO,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,WAAQD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAhC;AACH,GAFD;AAIA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AACI,IAAA,OAAO,EAAEX,KAAK,CAACY,eADnB;AAEI,IAAA,EAAE,EAAC,aAFP;AAGI,IAAA,SAAS,EAAEZ,KAAK,CAACa,YAAN,CAAmBC,MAAnB,GAA4B,CAA5B,GACL,EADK,GAEL,aALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAYKb,SAAS,CAACR,GAAV,CAAcC,GAAG,IACd;AACAA,EAAAA,GAAG,CAACqB,KAAJ,GAAY,CAAZ,IACI,MAAC,MAAD;AACI,IAAA,GAAG,EAAErB,GAAG,CAACiB,IADb;AAEI,IAAA,EAAE,EAAEjB,GAAG,CAACI,GAFZ;AAGI,IAAA,OAAO,EAAEE,KAAK,CAACY,eAHnB;AAII,IAAA,SAAS,EACLZ,KAAK,CAACa,YAAN,CAAmBG,QAAnB,CAA4BtB,GAAG,CAACI,GAAhC,IACM,aADN,GAEM,EAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUKJ,GAAG,CAACiB,IAVT,YAYMjB,GAAG,CAACuB,QAZV,MAHP,CAZL,CADJ,CA/BwB,CAiExB;AACH;;AAED,eAAelB,WAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport '../globalStyles.css'\n\nconst TagBtn = styled.button`\n    padding: 10px 15px;\n    margin: 15px 0 0 15px;\n    color: var(--secondary-color);\n    font-size: 1.2em;\n    border: none;\n    background-color: var(--primary-color);\n    font-family: 'Lustria', serif;\n    &:hover {\n        cursor: pointer;\n    }\n`\nfunction getTagCountsData(tags) {\n    return Promise.all(\n        tags.map(tag => {\n            return client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"tagCount\": count(\n                        *[ _type == \"post\" && $tagID in tags[]._ref ]\n                    )\n                }[0]\n            `, { tagID: tag._id })\n        })\n    )\n}\n\nfunction KeywordTags(props) {\n    const [ tagCounts, setTagCounts ] = useState([])\n    console.log('props: ', props)\n\n    useEffect(() => {\n        getTagCountsData(props.tags)\n            .then(tagCounts => {\n                setTagCounts(tagCounts)\n            })\n            .catch(err => console.log('error getting tag counts: ', err))\n        // tags.forEach(async tag => {\n        //     const count = await client.fetch(`\n        //         count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n        //     `, { tagID: tag._id })\n        //     // this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n        //     if (count > 0) {\n        //         const tagCount = {\n        //             _id: tag._id,\n        //             name: tag.name,\n        //             count\n        //         }\n        //         // TODO: what's a good way to set these all these at once??\n        //         setTagCounts(state => [...state, tagCount])\n        //     }\n        // })\n    }, [])\n\n    tagCounts.sort((a, b) => {\n        return (a.name > b.name) ? 1 : -1\n    })\n    \n    return (\n        <div>\n            <TagBtn\n                onClick={props.handleTagFilter}\n                id='clearFilter'\n                className={props.filteredTags.length > 0 \n                    ? ''\n                    : 'selectedTag'\n                }\n            >\n                All Posts\n            </TagBtn>\n\n            {tagCounts.map(tag => (\n                // console.log('tagtag: ', tag)\n                tag.count > 0 && (\n                    <TagBtn \n                        key={tag.name}\n                        id={tag._id}\n                        onClick={props.handleTagFilter}\n                        className={\n                            props.filteredTags.includes(tag._id) \n                                ? 'selectedTag'\n                                : ''\n                        }\n                    >   \n                        {tag.name}\n                        &nbsp;\n                        ({tag.tagCount})\n                    </TagBtn>\n                )\n            ))}\n        </div>\n    )\n    // return null\n}\n\nexport default KeywordTags"]},"metadata":{},"sourceType":"module"}