{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid var(--primary-darker);\"]);\nconst TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-1\"\n})([\"display:inline-block;margin-right:5px;padding:3px 5px;font-size:.5em;background-color:var(--secondary-color);\"]);\nconst DescP = styled.p.withConfig({\n  displayName: \"pages__DescP\",\n  componentId: \"nuslkc-2\"\n})([\"font-size:.85em;\"]);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-3\"\n})([\"font-size:.7em;\"]); // removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using Set, then parsing the final unique array of posts back to a normal array of objects\n\nfunction uniquePostsArray(posts) {\n  return [...new Set(posts.map(postObj => {\n    return JSON.stringify(postObj);\n  }))].map(postStr => {\n    return JSON.parse(postStr);\n  });\n}\n\nfunction Index({\n  posts,\n  tags,\n  _tagCounts: tagCounts\n}) {\n  console.log('posts: ', posts);\n  console.log('tags: ', tags);\n  const {\n    0: allPosts,\n    1: setAllPosts\n  } = useState(posts);\n  const {\n    0: filteredPosts,\n    1: setFilteredPosts\n  } = useState([]);\n  const {\n    0: _tagCounts,\n    1: setTagCounts\n  } = useState(tagCounts);\n  const {\n    0: filteredTags,\n    1: setFilteredTags\n  } = useState([]);\n  console.log('filteredTags global: ', filteredTags);\n  console.log('filteredPosts global: ', filteredPosts); // console.log('tagCounts global: ', tagCounts)\n  // async function getTagCountsData() {\n  //     return Promise.all(\n  //         tags.map(tag => {\n  //             return client.fetch(`\n  //                 *[ _id == $tagID ]{\n  //                     name,\n  //                     _id,\n  //                     \"tagCount\": count(\n  //                         *[ _type == \"post\" && $tagID in tags[]._ref ]\n  //                     )\n  //                 }[0]\n  //             `, { tagID: tag._id })\n  //         })\n  //     )\n  // }\n  // useEffect(() => {\n  //     getTagCountsData()\n  //         .then(tagCounts => {\n  //             setTagCounts(tagCounts)\n  //         })\n  //         .catch(err => console.log('error getting tag counts: ', err))\n  //     // tags.forEach(async tag => {\n  //     //     const count = await client.fetch(`\n  //     //         count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n  //     //     `, { tagID: tag._id })\n  //     //     // this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n  //     //     if (count > 0) {\n  //     //         const tagCount = {\n  //     //             _id: tag._id,\n  //     //             name: tag.name,\n  //     //             count\n  //     //         }\n  //     //         // TODO: what's a good way to set these all these at once??\n  //     //         setTagCounts(state => [...state, tagCount])\n  //     //     }\n  //     // })\n  // }, [])\n\n  useEffect(() => {\n    if (filteredTags.length > 0) {\n      const _filteredPosts = [];\n      allPosts.forEach(post => {\n        post.tags.forEach(tag => {\n          if (filteredTags.includes(tag._id)) {\n            _filteredPosts.push(post);\n          }\n        });\n      }); // console.log('_filteredPosts: ', _filteredPosts)\n\n      setFilteredPosts(uniquePostsArray(_filteredPosts));\n    } else {\n      setFilteredPosts([]);\n    }\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    const selectedTagID = e.target.id;\n\n    if (selectedTagID === 'clearFilter') {\n      setFilteredTags([]);\n    } else if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(state => [...state, selectedTagID]);\n    } else {\n      setFilteredTags(filteredTags.filter(tag => {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  const postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    filteredTags: filteredTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), postsToRender.map(({\n    _id,\n    _createdAt,\n    description,\n    slug,\n    title,\n    tags\n  }) => __jsx(ListItem, {\n    key: _id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: \"/post/[slug]\",\n    as: `/post/${slug.current}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 29\n    }\n  }, title)), __jsx(DescP, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    }\n  }, description), __jsx(DateP, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }, moment.utc(_createdAt).format(\"LL\")), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  }, tags.map(tag => {\n    return __jsx(TagListItem, {\n      key: tag._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 37\n      }\n    }, tag.name);\n  })))));\n}\n\nexport async function getStaticProps() {\n  // TODO: should these be chained somehow?\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `);\n\n  const _tagCounts = await client.fetch(`\n        *[ _id == $tagID ]{\n            name,\n            _id,\n            \"tagCount\": count(\n                *[ _type == \"post\" && $tagID in tags[]._ref ]\n            )\n        }[0]\n    `, {\n    tagID: tag._id\n  });\n\n  return {\n    props: {\n      posts,\n      tags,\n      _tagCounts\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","TagListItem","DescP","p","DateP","uniquePostsArray","posts","Set","map","postObj","JSON","stringify","postStr","parse","Index","tags","_tagCounts","tagCounts","console","log","allPosts","setAllPosts","filteredPosts","setFilteredPosts","setTagCounts","filteredTags","setFilteredTags","length","_filteredPosts","forEach","post","tag","includes","_id","push","handleTagFilter","e","selectedTagID","target","id","state","filter","postsToRender","_createdAt","description","slug","title","current","utc","format","name","getStaticProps","fetch","tagID","props"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid var(--primary-darker);\n`\nconst TagListItem = styled.li`\n    display: inline-block;\n    margin-right: 5px;\n    padding: 3px 5px;\n    font-size: .5em;\n    background-color: var(--secondary-color);\n`\nconst DescP = styled.p`\n    font-size: .85em;\n`\nconst DateP = styled.p`\n    font-size: .7em;\n`\n\n// removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using Set, then parsing the final unique array of posts back to a normal array of objects\nfunction uniquePostsArray(posts) {\n    return [\n        ...new Set(posts.map(postObj => {\n            return JSON.stringify(postObj)\n        }))\n    ].map(postStr => {\n       return JSON.parse(postStr)\n    })\n}\n\nfunction Index({ posts, tags, _tagCounts: tagCounts }) {\n    console.log('posts: ', posts)\n    console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ _tagCounts, setTagCounts ] = useState(tagCounts)\n    const [ filteredTags, setFilteredTags ] = useState([])\n    console.log('filteredTags global: ', filteredTags)\n    console.log('filteredPosts global: ', filteredPosts)\n    // console.log('tagCounts global: ', tagCounts)\n    \n    // async function getTagCountsData() {\n    //     return Promise.all(\n    //         tags.map(tag => {\n    //             return client.fetch(`\n    //                 *[ _id == $tagID ]{\n    //                     name,\n    //                     _id,\n    //                     \"tagCount\": count(\n    //                         *[ _type == \"post\" && $tagID in tags[]._ref ]\n    //                     )\n    //                 }[0]\n    //             `, { tagID: tag._id })\n    //         })\n    //     )\n    // }\n\n    // useEffect(() => {\n    //     getTagCountsData()\n    //         .then(tagCounts => {\n    //             setTagCounts(tagCounts)\n    //         })\n    //         .catch(err => console.log('error getting tag counts: ', err))\n    //     // tags.forEach(async tag => {\n    //     //     const count = await client.fetch(`\n    //     //         count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n    //     //     `, { tagID: tag._id })\n    //     //     // this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n    //     //     if (count > 0) {\n    //     //         const tagCount = {\n    //     //             _id: tag._id,\n    //     //             name: tag.name,\n    //     //             count\n    //     //         }\n    //     //         // TODO: what's a good way to set these all these at once??\n    //     //         setTagCounts(state => [...state, tagCount])\n    //     //     }\n    //     // })\n    // }, [])\n\n    useEffect(() => {\n        if (filteredTags.length > 0) {\n            const _filteredPosts = []\n            allPosts.forEach(post => {\n                post.tags.forEach(tag => {\n                    if (filteredTags.includes(tag._id)) {\n                        _filteredPosts.push(post)\n                    }\n                })\n            })\n            // console.log('_filteredPosts: ', _filteredPosts)\n            setFilteredPosts(\n                uniquePostsArray(_filteredPosts)\n            )\n\n        } else {\n            setFilteredPosts([])\n        }\n    }, [filteredTags])\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (selectedTagID === 'clearFilter') {\n            setFilteredTags([])\n        } else if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n                filteredTags={filteredTags}\n            />\n\n            <h2>Posts:</h2>\n            {postsToRender.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                    tags\n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <DescP>{description}</DescP>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                        <ul>\n                            {tags.map(tag => {\n                                return (\n                                    <TagListItem key={tag._id}>\n                                        {tag.name}\n                                    </TagListItem>\n                                )\n                                \n                            })}\n                        </ul>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    const _tagCounts = await client.fetch(`\n        *[ _id == $tagID ]{\n            name,\n            _id,\n            \"tagCount\": count(\n                *[ _type == \"post\" && $tagID in tags[]._ref ]\n            )\n        }[0]\n    `, { tagID: tag._id })\n\n    return { \n        props: { \n            posts,\n            tags,\n            _tagCounts\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}