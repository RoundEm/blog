{"ast":null,"code":"var _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nconst ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid var(--primary-darker);\"]);\nconst ListItemLink = styled.a.withConfig({\n  displayName: \"pages__ListItemLink\",\n  componentId: \"nuslkc-1\"\n})([\"font-weight:400;&:hover{cursor:pointer;color:\", \";}\"], ({\n  theme\n}) => theme.primaryColor);\nconst TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-2\"\n})([\"display:inline-block;margin-right:5px;padding:3px 5px;font-size:.5em;color:\", \";background:\", \";\"], ({\n  theme\n}) => theme.secondaryColor, ({\n  theme\n}) => theme.primaryColor);\nconst DescP = styled.p.withConfig({\n  displayName: \"pages__DescP\",\n  componentId: \"nuslkc-3\"\n})([\"font-size:.85em;color:\", \";\"], ({\n  theme\n}) => theme.primaryColor);\nconst DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-4\"\n})([\"font-size:.7em;\"]); // removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using `new Set`, then parsing the final unique array of posts back to a normal array of objects\n\nfunction uniquePostsArray(posts) {\n  return [...new Set(posts.map(postObj => {\n    return JSON.stringify(postObj);\n  }))].map(postStr => {\n    return JSON.parse(postStr);\n  });\n}\n\nfunction getTagCountsData(tags) {\n  return Promise.all(tags.map(async tag => {\n    return await client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"count\": count(\n                        *[ \n                            _type == \"post\" && \n                            $tagID in tags[]._ref \n                        ]\n                    )\n                }[0]\n            `, {\n      tagID: tag._id\n    });\n  }));\n}\n\nfunction Index({\n  posts,\n  tags,\n  onToggleThemeClick\n}) {\n  // console.log('posts: ', posts)\n  // console.log('tags: ', tags)\n  const {\n    0: allPosts\n  } = useState(posts);\n  const {\n    0: filteredPosts,\n    1: setFilteredPosts\n  } = useState([]);\n  const {\n    0: tagCounts,\n    1: setTagCounts\n  } = useState([]);\n  const {\n    0: filteredTags,\n    1: setFilteredTags\n  } = useState([]); // console.log('tagCounts: ', tagCounts)\n\n  useEffect(() => {\n    getTagCountsData(tags).then(tagCounts => {\n      setTagCounts(tagCounts);\n    }).catch(err => console.log('error getting tag counts: ', err));\n  }, []);\n  useEffect(() => {\n    if (filteredTags.length > 0) {\n      const _filteredPosts = [];\n      allPosts.forEach(post => {\n        post.tags.forEach(tag => {\n          if (filteredTags.includes(tag._id)) {\n            _filteredPosts.push(post);\n          }\n        });\n      });\n      setFilteredPosts(uniquePostsArray(_filteredPosts));\n    } else {\n      setFilteredPosts([]);\n    }\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    const selectedTagID = e.target.id;\n\n    if (selectedTagID === 'clearFilter') {\n      setFilteredTags([]);\n    } else if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(state => [...state, selectedTagID]);\n    } else {\n      setFilteredTags(filteredTags.filter(tag => {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  const postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return (// TODO: is there a better way to render HeaderLayout instead of using in here and in [slug] (and any other separate pages that I add? Checkout next.js _document)\n    __jsx(HeaderLayout, {\n      onToggleThemeClick: onToggleThemeClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"Tags:\"), __jsx(KeywordTags, {\n      tags: tagCounts,\n      handleTagFilter: handleTagFilter,\n      filteredTags: filteredTags,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, \"Posts:\"), postsToRender.map(({\n      _id,\n      _createdAt,\n      description,\n      slug,\n      title,\n      tags\n    }) => __jsx(ListItem, {\n      key: _id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: `/post/${slug.current}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }\n    }, __jsx(ListItemLink, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, title)), __jsx(DescP, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")), __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }, tags.map(tag => {\n      return __jsx(TagListItem, {\n        key: tag._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 37\n        }\n      }, tag.name);\n    })))))\n  );\n}\n\nexport async function getStaticProps() {\n  const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `);\n  const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `);\n  return {\n    props: {\n      posts,\n      tags\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","ListItemLink","a","theme","primaryColor","TagListItem","secondaryColor","DescP","p","DateP","uniquePostsArray","posts","Set","map","postObj","JSON","stringify","postStr","parse","getTagCountsData","tags","Promise","all","tag","fetch","tagID","_id","Index","onToggleThemeClick","allPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","then","catch","err","console","log","length","_filteredPosts","forEach","post","includes","push","handleTagFilter","e","selectedTagID","target","id","state","filter","postsToRender","_createdAt","description","slug","title","current","utc","format","name","getStaticProps","props"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid var(--primary-darker);\n`\nconst ListItemLink = styled.a`\n    font-weight: 400;\n    &:hover {\n        cursor: pointer;\n        /* color: var(--primary-darker); */\n        color: ${({ theme }) => theme.primaryColor};\n    }\n`\nconst TagListItem = styled.li`\n    display: inline-block;\n    margin-right: 5px;\n    padding: 3px 5px;\n    font-size: .5em;\n    color: ${({ theme }) => theme.secondaryColor};\n    background: ${({ theme }) => theme.primaryColor};\n`\nconst DescP = styled.p`\n    font-size: .85em;\n    color: ${({ theme }) => theme.primaryColor};\n`\nconst DateP = styled.p`\n    font-size: .7em;\n`\n\n// removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using `new Set`, then parsing the final unique array of posts back to a normal array of objects\nfunction uniquePostsArray(posts) {\n    return [\n        ...new Set(posts.map(postObj => {\n            return JSON.stringify(postObj)\n        }))\n    ].map(postStr => {\n       return JSON.parse(postStr)\n    })\n}\n\nfunction getTagCountsData(tags) {\n    return Promise.all(\n        tags.map(async tag => {\n            return await client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"count\": count(\n                        *[ \n                            _type == \"post\" && \n                            $tagID in tags[]._ref \n                        ]\n                    )\n                }[0]\n            `, { tagID: tag._id })\n        })\n    )\n}\n\nfunction Index({ \n    posts, \n    tags, \n    onToggleThemeClick\n}) {\n    // console.log('posts: ', posts)\n    // console.log('tags: ', tags)\n    const [ allPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    // console.log('tagCounts: ', tagCounts)\n\n    useEffect(() => {\n        getTagCountsData(tags)\n            .then(tagCounts => {\n                setTagCounts(tagCounts)\n            })\n            .catch(err => console.log('error getting tag counts: ', err))\n    }, [])\n\n    useEffect(() => {\n        if (filteredTags.length > 0) {\n            const _filteredPosts = []\n            allPosts.forEach(post => {\n                post.tags.forEach(tag => {\n                    if (filteredTags.includes(tag._id)) {\n                        _filteredPosts.push(post)\n                    }\n                })\n            })  \n            setFilteredPosts(\n                uniquePostsArray(_filteredPosts)\n            )\n        } else {\n            setFilteredPosts([])\n        }\n    }, [filteredTags])\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (selectedTagID === 'clearFilter') {\n            setFilteredTags([])\n        } else if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        // TODO: is there a better way to render HeaderLayout instead of using in here and in [slug] (and any other separate pages that I add? Checkout next.js _document)\n        <HeaderLayout onToggleThemeClick={onToggleThemeClick}>\n            \n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n                filteredTags={filteredTags}\n            />\n\n            <h2>Posts:</h2>\n            {postsToRender.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                    tags\n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <ListItemLink>{title}</ListItemLink>\n                        </Link>\n                        <DescP>{description}</DescP>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                        <ul>\n                            {tags.map(tag => {\n                                return (\n                                    <TagListItem key={tag._id}>\n                                        {tag.name}\n                                    </TagListItem>\n                                )\n                            })}\n                        </ul>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}