{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled, { ThemeProvider } from 'styled-components';\nimport { GlobalStyles } from '../components/GlobalStyles';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags'; // import '../globalStyles.css'\n\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid var(--primary-darker);\"]);\nvar TagListItem = styled.li.withConfig({\n  displayName: \"pages__TagListItem\",\n  componentId: \"nuslkc-1\"\n})([\"display:inline-block;margin-right:5px;padding:3px 5px;font-size:.5em;background-color:var(--secondary-color);\"]);\nvar DescP = styled.p.withConfig({\n  displayName: \"pages__DescP\",\n  componentId: \"nuslkc-2\"\n})([\"font-size:.85em;\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-3\"\n})([\"font-size:.7em;\"]); // (due to objects being by ref) removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using `new Set`, then parsing the final unique array of posts back to a normal array of objects\n\nfunction uniquePostsArray(posts) {\n  return _toConsumableArray(new Set(posts.map(function (postObj) {\n    return JSON.stringify(postObj);\n  }))).map(function (postStr) {\n    return JSON.parse(postStr);\n  });\n}\n\nfunction getTagCountsData(tags) {\n  return Promise.all(tags.map(function _callee(tag) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(client.fetch(\"\\n                *[ _id == $tagID ]{\\n                    name,\\n                    _id,\\n                    \\\"count\\\": count(\\n                        *[ \\n                            _type == \\\"post\\\" && \\n                            $tagID in tags[]._ref \\n                        ]\\n                    )\\n                }[0]\\n            \", {\n              tagID: tag._id\n            }));\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }));\n}\n\nvar _theme = {\n  body: '#363537',\n  text: '#FAFAFA',\n  toggleBorder: '#6B8096',\n  gradient: 'linear-gradient(#091236, #1E215D)'\n}; // const lightTheme = {\n//     body: '#E2E2E2',\n//     text: '#363537',\n//     toggleBorder: '#FFF',\n//     gradient: 'linear-gradient(#39598A, #79D7ED)',\n//   }\n\nfunction Index(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts,\n      tags = _ref.tags;\n\n  // console.log('posts: ', posts)\n  // console.log('tags: ', tags)\n  var _useState = useState(posts),\n      allPosts = _useState[0],\n      setAllPosts = _useState[1];\n\n  var _useState2 = useState([]),\n      filteredPosts = _useState2[0],\n      setFilteredPosts = _useState2[1];\n\n  var _useState3 = useState([]),\n      tagCounts = _useState3[0],\n      setTagCounts = _useState3[1];\n\n  var _useState4 = useState([]),\n      filteredTags = _useState4[0],\n      setFilteredTags = _useState4[1];\n\n  var _useState5 = useState('light'),\n      theme = _useState5[0],\n      setTheme = _useState5[1];\n\n  useEffect(function () {\n    getTagCountsData(tags).then(function (tagCounts) {\n      setTagCounts(tagCounts);\n    })[\"catch\"](function (err) {\n      return console.log('error getting tag counts: ', err);\n    });\n  }, []);\n  useEffect(function () {\n    if (filteredTags.length > 0) {\n      var _filteredPosts = [];\n      allPosts.forEach(function (post) {\n        post.tags.forEach(function (tag) {\n          if (filteredTags.includes(tag._id)) {\n            _filteredPosts.push(post);\n          }\n        });\n      });\n      setFilteredPosts(uniquePostsArray(_filteredPosts));\n    } else {\n      setFilteredPosts([]);\n    }\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    var selectedTagID = e.target.id;\n\n    if (selectedTagID === 'clearFilter') {\n      setFilteredTags([]);\n    } else if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(function (state) {\n        return [].concat(_toConsumableArray(state), [selectedTagID]);\n      });\n    } else {\n      setFilteredTags(filteredTags.filter(function (tag) {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  var postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(ThemeProvider, {\n    theme: lightTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, __jsx(React.Fragment, null, __jsx(GlobalStyles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }), __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    filteredTags: filteredTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }, \"Posts:\"), postsToRender.map(function (_ref2) {\n    var _id = _ref2._id,\n        _createdAt = _ref2._createdAt,\n        description = _ref2.description,\n        slug = _ref2.slug,\n        title = _ref2.title,\n        tags = _ref2.tags;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 37\n      }\n    }, title)), __jsx(DescP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 33\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 33\n      }\n    }, moment.utc(_createdAt).format(\"LL\")), __jsx(\"ul\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 33\n      }\n    }, tags.map(function (tag) {\n      return __jsx(TagListItem, {\n        key: tag._id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 45\n        }\n      }, tag.name);\n    })));\n  }))));\n}\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","ThemeProvider","GlobalStyles","moment","HeaderLayout","KeywordTags","ListItem","li","TagListItem","DescP","p","DateP","uniquePostsArray","posts","Set","map","postObj","JSON","stringify","postStr","parse","getTagCountsData","tags","Promise","all","tag","fetch","tagID","_id","_theme","body","text","toggleBorder","gradient","Index","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","theme","setTheme","then","err","console","log","length","_filteredPosts","forEach","post","includes","push","handleTagFilter","e","selectedTagID","target","id","state","filter","postsToRender","lightTheme","_createdAt","description","slug","title","current","utc","format","name"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { GlobalStyles } from '../components/GlobalStyles'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\n// import '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid var(--primary-darker);\n`\nconst TagListItem = styled.li`\n    display: inline-block;\n    margin-right: 5px;\n    padding: 3px 5px;\n    font-size: .5em;\n    background-color: var(--secondary-color);\n`\nconst DescP = styled.p`\n    font-size: .85em;\n`\nconst DateP = styled.p`\n    font-size: .7em;\n`\n\n// (due to objects being by ref) removes duplicate post objects by converting each post into a JSON string so that they can be compared and filtered using `new Set`, then parsing the final unique array of posts back to a normal array of objects\nfunction uniquePostsArray(posts) {\n    return [\n        ...new Set(posts.map(postObj => {\n            return JSON.stringify(postObj)\n        }))\n    ].map(postStr => {\n       return JSON.parse(postStr)\n    })\n}\n\nfunction getTagCountsData(tags) {\n    return Promise.all(\n        tags.map(async tag => {\n            return await client.fetch(`\n                *[ _id == $tagID ]{\n                    name,\n                    _id,\n                    \"count\": count(\n                        *[ \n                            _type == \"post\" && \n                            $tagID in tags[]._ref \n                        ]\n                    )\n                }[0]\n            `, { tagID: tag._id })\n        })\n    )\n}\nconst _theme = {\n    body: '#363537',\n    text: '#FAFAFA',\n    toggleBorder: '#6B8096',\n    gradient: 'linear-gradient(#091236, #1E215D)',\n  }\n\n// const lightTheme = {\n//     body: '#E2E2E2',\n//     text: '#363537',\n//     toggleBorder: '#FFF',\n//     gradient: 'linear-gradient(#39598A, #79D7ED)',\n//   }\n\nfunction Index({ posts, tags }) {\n    // console.log('posts: ', posts)\n    // console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    const [ theme, setTheme ] = useState('light');\n    \n    useEffect(() => {\n        getTagCountsData(tags)\n            .then(tagCounts => {\n                setTagCounts(tagCounts)\n            })\n            .catch(err => console.log('error getting tag counts: ', err))\n    }, [])\n\n    useEffect(() => {\n        if (filteredTags.length > 0) {\n            const _filteredPosts = []\n            allPosts.forEach(post => {\n                post.tags.forEach(tag => {\n                    if (filteredTags.includes(tag._id)) {\n                        _filteredPosts.push(post)\n                    }\n                })\n            })  \n            setFilteredPosts(\n                uniquePostsArray(_filteredPosts)\n            )\n\n        } else {\n            setFilteredPosts([])\n        }\n    }, [filteredTags])\n\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (selectedTagID === 'clearFilter') {\n            setFilteredTags([])\n        } else if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        <ThemeProvider theme={lightTheme}>\n            <>\n                <GlobalStyles />\n                <HeaderLayout>\n\n                    <h2>Tags:</h2>\n                    <KeywordTags \n                        tags={tagCounts}\n                        handleTagFilter={handleTagFilter}\n                        filteredTags={filteredTags}\n                    />\n\n                    <h2>Posts:</h2>\n                    {postsToRender.map(\n                        ({ \n                            _id, \n                            _createdAt,\n                            description, \n                            slug,\n                            title, \n                            tags\n                        }) => (\n                            <ListItem key={_id}>\n                                <Link\n                                    href='/post/[slug]'\n                                    as={`/post/${slug.current}`}\n                                >\n                                    <a>{title}</a>\n                                </Link>\n                                <DescP>{description}</DescP>\n                                <DateP>\n                                    {moment.utc(_createdAt).format(\"LL\")}\n                                </DateP>\n                                <ul>\n                                    {tags.map(tag => {\n                                        return (\n                                            <TagListItem key={tag._id}>\n                                                {tag.name}\n                                            </TagListItem>\n                                        )\n                                    })}\n                                </ul>\n                            </ListItem>\n                        )\n                    )}\n                </HeaderLayout>\n            </>\n        </ThemeProvider>\n    )\n}\n\nexport async function getStaticProps() {\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}