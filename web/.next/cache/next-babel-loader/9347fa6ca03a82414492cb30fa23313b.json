{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/jasonroundtree/projects/blog/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../client';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react'; // import useSWR from 'swr'\n\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport HeaderLayout from '../components/HeaderLayout';\nimport KeywordTags from '../components/KeywordTags';\nimport '../globalStyles.css';\nvar ListItem = styled.li.withConfig({\n  displayName: \"pages__ListItem\",\n  componentId: \"nuslkc-0\"\n})([\"margin:15px 0 0 15px;padding:10px 15px;font-size:1.75em;border:1px solid rgb(250,223,147);\"]);\nvar DateP = styled.p.withConfig({\n  displayName: \"pages__DateP\",\n  componentId: \"nuslkc-1\"\n})([\"font-size:.75em;\"]);\n\nfunction Index(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts,\n      tags = _ref.tags;\n\n  // console.log('posts: ', posts)\n  // console.log('tags: ', tags)\n  var _useState = useState(posts),\n      allPosts = _useState[0],\n      setAllPosts = _useState[1];\n\n  var _useState2 = useState([]),\n      filteredPosts = _useState2[0],\n      setFilteredPosts = _useState2[1];\n\n  var _useState3 = useState([]),\n      tagCounts = _useState3[0],\n      setTagCounts = _useState3[1];\n\n  var _useState4 = useState([]),\n      filteredTags = _useState4[0],\n      setFilteredTags = _useState4[1]; // console.log('tagCounts: ', tagCounts)\n\n\n  console.log('filteredTags global: ', filteredTags);\n  console.log('filteredPosts global: ', filteredPosts);\n  useEffect(function () {\n    tags.forEach(function _callee(tag) {\n      var count, tagCount;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(client.fetch(\"\\n                count(*[ _type == \\\"post\\\" && $tagID in tags[]._ref ])\\n            \", {\n                tagID: tag._id\n              }));\n\n            case 2:\n              count = _context.sent;\n\n              // TODO: this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n              if (count > 0) {\n                tagCount = {\n                  _id: tag._id,\n                  name: tag.name,\n                  count: count\n                }; // TODO: Should i call all these at once??\n\n                setTagCounts(function (state) {\n                  return [].concat(_toConsumableArray(state), [tagCount]);\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  }, []);\n  useEffect(function () {\n    console.log('getFilteredPosts');\n    console.log('filteredTags useEffect: ', filteredTags); // TODO: not totally sure how this mounted variable \n    // and the cleanup function at the end are working\n    // to prevent react's memory leak warning:\n    // https://www.debuggr.io/react-update-unmounted-component/\n    // let mounted = true\n    // if (filteredTags.length > 0 && mounted) {\n\n    if (filteredTags.length > 0) {\n      // const allUniquePosts = []\n      var allMatchedPosts = filteredTags.map(function _callee2(tag) {\n        var matchedPosts;\n        return _regeneratorRuntime.async(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(client.fetch(\"\\n                    *[ _type == \\\"post\\\" && $tagID in tags[]._ref ]{\\n                        ..., \\n                        tags[]->{_id, name}\\n                    }\\n                \", {\n                  tagID: tag\n                }));\n\n              case 2:\n                matchedPosts = _context2.sent;\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n      console.log('sadsadszddsa');\n      setFilteredPosts(allUniquePosts); // const set = new Set()\n      // const filteredArray = matchedPostsUniqueIDs.filter(post => {\n      //     const dupe = set.has(post._id)\n      //     set.add(post._id)\n      //     return !dupe\n      // })\n      // console.log('filteredArray: ', filteredArray)\n      // setFilteredPosts(filteredArray)\n    } else {\n      setFilteredPosts([]);\n    } // return () => mounted = false\n\n  }, [filteredTags]);\n\n  function handleTagFilter(e) {\n    var selectedTagID = e.target.id;\n\n    if (!filteredTags.includes(selectedTagID)) {\n      setFilteredTags(function (state) {\n        return [].concat(_toConsumableArray(state), [selectedTagID]);\n      });\n    } else {\n      setFilteredTags(filteredTags.filter(function (tag) {\n        return tag !== selectedTagID;\n      }));\n    }\n  }\n\n  var postsToRender = filteredPosts.length > 0 ? filteredPosts : allPosts;\n  return __jsx(HeaderLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"Tags:\"), __jsx(KeywordTags, {\n    tags: tagCounts,\n    handleTagFilter: handleTagFilter,\n    filteredTags: filteredTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Posts:\"), postsToRender.map(function (_ref2) {\n    var _id = _ref2._id,\n        _createdAt = _ref2._createdAt,\n        description = _ref2.description,\n        slug = _ref2.slug,\n        title = _ref2.title;\n    return __jsx(ListItem, {\n      key: _id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 29\n      }\n    }, title)), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, description), __jsx(DateP, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }\n    }, moment.utc(_createdAt).format(\"LL\")));\n  }));\n}\n\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/Users/jasonroundtree/projects/blog/web/pages/index.js"],"names":["client","Link","useState","useEffect","styled","moment","HeaderLayout","KeywordTags","ListItem","li","DateP","p","Index","posts","tags","allPosts","setAllPosts","filteredPosts","setFilteredPosts","tagCounts","setTagCounts","filteredTags","setFilteredTags","console","log","forEach","tag","fetch","tagID","_id","count","tagCount","name","state","length","allMatchedPosts","map","matchedPosts","allUniquePosts","handleTagFilter","e","selectedTagID","target","id","includes","filter","postsToRender","_createdAt","description","slug","title","current","utc","format"],"mappings":"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","sourcesContent":["import client from '../client'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\n// import useSWR from 'swr'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport HeaderLayout from '../components/HeaderLayout'\nimport KeywordTags from '../components/KeywordTags'\nimport '../globalStyles.css'\n\nconst ListItem = styled.li`\n    margin: 15px 0 0 15px;\n    padding: 10px 15px;\n    font-size: 1.75em;\n    border: 1px solid rgb(250, 223, 147);\n`\nconst DateP = styled.p`\n    font-size: .75em;\n`\n\nfunction Index({ posts, tags }) {\n    // console.log('posts: ', posts)\n    // console.log('tags: ', tags)\n    const [ allPosts, setAllPosts ] = useState(posts)\n    const [ filteredPosts, setFilteredPosts ] = useState([])\n    const [ tagCounts, setTagCounts ] = useState([])\n    const [ filteredTags, setFilteredTags ] = useState([])\n    // console.log('tagCounts: ', tagCounts)\n    console.log('filteredTags global: ', filteredTags)\n    console.log('filteredPosts global: ', filteredPosts)\n    \n    useEffect(() => {\n        tags.forEach(async tag => {\n            const count = await client.fetch(`\n                count(*[ _type == \"post\" && $tagID in tags[]._ref ])\n            `, { tagID: tag._id })\n            // TODO: this check is in case i've added a tag in sanity studio but haven't assigned it to a post yet:\n            if (count > 0) {\n                const tagCount = {\n                    _id: tag._id,\n                    name: tag.name,\n                    count\n                }\n                // TODO: Should i call all these at once??\n                setTagCounts(state => [...state, tagCount])\n            }\n        })\n    }, [])\n\n    \n    useEffect(() => {\n        console.log('getFilteredPosts')\n        console.log('filteredTags useEffect: ', filteredTags)\n\n        // TODO: not totally sure how this mounted variable \n        // and the cleanup function at the end are working\n        // to prevent react's memory leak warning:\n        // https://www.debuggr.io/react-update-unmounted-component/\n        // let mounted = true\n        // if (filteredTags.length > 0 && mounted) {\n        if (filteredTags.length > 0) {\n            // const allUniquePosts = []\n            const allMatchedPosts = filteredTags.map(async tag => {\n                const matchedPosts = await client.fetch(`\n                    *[ _type == \"post\" && $tagID in tags[]._ref ]{\n                        ..., \n                        tags[]->{_id, name}\n                    }\n                `, { tagID: tag })\n                // console.log('matchedPosts after query: ', matchedPosts)\n                // const uniquePosts = matchedPosts.filter(matchedPost => {\n                //     console.log('matchedPost: ', matchedPost)\n                //     return filteredPosts.map(filteredPost => {\n                //         console.log('filteredPost: ', filteredPost)\n                //         return matchedPost._id !== filteredPost._id\n                //     })\n                // })\n                // console.log('uniquePosts: ', uniquePosts)\n                // allUniquePosts.push(...uniquePosts)\n                \n                \n            })\n            console.log('sadsadszddsa')\n            setFilteredPosts(allUniquePosts)\n            // const set = new Set()\n            // const filteredArray = matchedPostsUniqueIDs.filter(post => {\n            //     const dupe = set.has(post._id)\n            //     set.add(post._id)\n            //     return !dupe\n            // })\n            // console.log('filteredArray: ', filteredArray)\n            // setFilteredPosts(filteredArray)\n        } else {\n            setFilteredPosts([])\n        }\n        // return () => mounted = false\n    }, [filteredTags])\n\n    function handleTagFilter(e) {\n        const selectedTagID = e.target.id\n        if (!filteredTags.includes(selectedTagID)) {\n            setFilteredTags(state => [...state, selectedTagID])\n        } else {\n            setFilteredTags(filteredTags.filter(tag => {\n               return tag !== selectedTagID\n            }))\n        }\n    }\n\n    const postsToRender = filteredPosts.length > 0 \n        ? filteredPosts \n        : allPosts\n\n    return (\n        <HeaderLayout>\n            <h2>Tags:</h2>\n            <KeywordTags \n                tags={tagCounts}\n                handleTagFilter={handleTagFilter}\n                filteredTags={filteredTags}\n            />\n\n            <h2>Posts:</h2>\n\n            {postsToRender.map(\n                ({ \n                    _id, \n                    _createdAt,\n                    description, \n                    slug,\n                    title, \n                }) => (\n                    <ListItem key={_id}>\n                        <Link\n                            href='/post/[slug]'\n                            as={`/post/${slug.current}`}\n                        >\n                            <a>{title}</a>\n                        </Link>\n                        <p>{description}</p>\n                        <DateP>\n                            {moment.utc(_createdAt).format(\"LL\")}\n                        </DateP>\n                    </ListItem>\n                )\n            )}\n        </HeaderLayout>\n    )\n}\n\nexport async function getStaticProps() {\n    // TODO: should these be chained somehow?\n    const posts = await client.fetch(`\n        *[ _type == \"post\" ]{\n            ..., \n            tags[]->{_id, name}\n        }\n    `)\n\n    const tags = await client.fetch(`\n        *[ _type == \"tag\" ] {\n            _id, name\n        }\n    `)\n\n    return { \n        props: { \n            posts,\n            tags\n        } \n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}